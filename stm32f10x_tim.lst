
D:\Dropbox\Work\MWIR\Firmware\[5]MWIR - DRV8825_2 - Acctest\stm32f10x_tim.o:     file format elf32-littlearm
D:\Dropbox\Work\MWIR\Firmware\[5]MWIR - DRV8825_2 - Acctest\stm32f10x_tim.o

Disassembly of section .text.TIM_DeInit:

00000000 <TIM_DeInit>:
TIM_DeInit():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:123
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:127
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
   8:	687a      	ldr	r2, [r7, #4]
   a:	f642 4300 	movw	r3, #11264	; 0x2c00
   e:	f2c4 0301 	movt	r3, #16385	; 0x4001
  12:	429a      	cmp	r2, r3
  14:	d10c      	bne.n	30 <TIM_DeInit+0x30>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:129
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
  16:	f44f 6000 	mov.w	r0, #2048	; 0x800
  1a:	f04f 0101 	mov.w	r1, #1	; 0x1
  1e:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:130
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  22:	f44f 6000 	mov.w	r0, #2048	; 0x800
  26:	f04f 0100 	mov.w	r1, #0	; 0x0
  2a:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  2e:	e13b      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:132
  }     
  else if (TIMx == TIM2)
  30:	687b      	ldr	r3, [r7, #4]
  32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  36:	d10c      	bne.n	52 <TIM_DeInit+0x52>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:134
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
  38:	f04f 0001 	mov.w	r0, #1	; 0x1
  3c:	f04f 0101 	mov.w	r1, #1	; 0x1
  40:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:135
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  44:	f04f 0001 	mov.w	r0, #1	; 0x1
  48:	f04f 0100 	mov.w	r1, #0	; 0x0
  4c:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  50:	e12a      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:137
  }
  else if (TIMx == TIM3)
  52:	687a      	ldr	r2, [r7, #4]
  54:	f240 4300 	movw	r3, #1024	; 0x400
  58:	f2c4 0300 	movt	r3, #16384	; 0x4000
  5c:	429a      	cmp	r2, r3
  5e:	d10c      	bne.n	7a <TIM_DeInit+0x7a>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:139
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
  60:	f04f 0002 	mov.w	r0, #2	; 0x2
  64:	f04f 0101 	mov.w	r1, #1	; 0x1
  68:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:140
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  6c:	f04f 0002 	mov.w	r0, #2	; 0x2
  70:	f04f 0100 	mov.w	r1, #0	; 0x0
  74:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  78:	e116      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:142
  }
  else if (TIMx == TIM4)
  7a:	687a      	ldr	r2, [r7, #4]
  7c:	f640 0300 	movw	r3, #2048	; 0x800
  80:	f2c4 0300 	movt	r3, #16384	; 0x4000
  84:	429a      	cmp	r2, r3
  86:	d10c      	bne.n	a2 <TIM_DeInit+0xa2>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:144
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
  88:	f04f 0004 	mov.w	r0, #4	; 0x4
  8c:	f04f 0101 	mov.w	r1, #1	; 0x1
  90:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:145
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  94:	f04f 0004 	mov.w	r0, #4	; 0x4
  98:	f04f 0100 	mov.w	r1, #0	; 0x0
  9c:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  a0:	e102      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:147
  } 
  else if (TIMx == TIM5)
  a2:	687a      	ldr	r2, [r7, #4]
  a4:	f640 4300 	movw	r3, #3072	; 0xc00
  a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
  ac:	429a      	cmp	r2, r3
  ae:	d10c      	bne.n	ca <TIM_DeInit+0xca>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:149
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
  b0:	f04f 0008 	mov.w	r0, #8	; 0x8
  b4:	f04f 0101 	mov.w	r1, #1	; 0x1
  b8:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:150
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  bc:	f04f 0008 	mov.w	r0, #8	; 0x8
  c0:	f04f 0100 	mov.w	r1, #0	; 0x0
  c4:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  c8:	e0ee      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:152
  } 
  else if (TIMx == TIM6)
  ca:	687a      	ldr	r2, [r7, #4]
  cc:	f241 0300 	movw	r3, #4096	; 0x1000
  d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
  d4:	429a      	cmp	r2, r3
  d6:	d10c      	bne.n	f2 <TIM_DeInit+0xf2>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:154
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
  d8:	f04f 0010 	mov.w	r0, #16	; 0x10
  dc:	f04f 0101 	mov.w	r1, #1	; 0x1
  e0:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:155
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  e4:	f04f 0010 	mov.w	r0, #16	; 0x10
  e8:	f04f 0100 	mov.w	r1, #0	; 0x0
  ec:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  f0:	e0da      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:157
  } 
  else if (TIMx == TIM7)
  f2:	687a      	ldr	r2, [r7, #4]
  f4:	f241 4300 	movw	r3, #5120	; 0x1400
  f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
  fc:	429a      	cmp	r2, r3
  fe:	d10c      	bne.n	11a <TIM_DeInit+0x11a>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:159
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 100:	f04f 0020 	mov.w	r0, #32	; 0x20
 104:	f04f 0101 	mov.w	r1, #1	; 0x1
 108:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:160
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 10c:	f04f 0020 	mov.w	r0, #32	; 0x20
 110:	f04f 0100 	mov.w	r1, #0	; 0x0
 114:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
 118:	e0c6      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:162
  } 
  else if (TIMx == TIM8)
 11a:	687a      	ldr	r2, [r7, #4]
 11c:	f243 4300 	movw	r3, #13312	; 0x3400
 120:	f2c4 0301 	movt	r3, #16385	; 0x4001
 124:	429a      	cmp	r2, r3
 126:	d10c      	bne.n	142 <TIM_DeInit+0x142>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:164
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 128:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 12c:	f04f 0101 	mov.w	r1, #1	; 0x1
 130:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:165
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 134:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 138:	f04f 0100 	mov.w	r1, #0	; 0x0
 13c:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 140:	e0b2      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:167
  }
  else if (TIMx == TIM9)
 142:	687a      	ldr	r2, [r7, #4]
 144:	f644 4300 	movw	r3, #19456	; 0x4c00
 148:	f2c4 0301 	movt	r3, #16385	; 0x4001
 14c:	429a      	cmp	r2, r3
 14e:	d10c      	bne.n	16a <TIM_DeInit+0x16a>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:169
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 150:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 154:	f04f 0101 	mov.w	r1, #1	; 0x1
 158:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:170
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 15c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 160:	f04f 0100 	mov.w	r1, #0	; 0x0
 164:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 168:	e09e      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:172
   }  
  else if (TIMx == TIM10)
 16a:	687a      	ldr	r2, [r7, #4]
 16c:	f245 0300 	movw	r3, #20480	; 0x5000
 170:	f2c4 0301 	movt	r3, #16385	; 0x4001
 174:	429a      	cmp	r2, r3
 176:	d10c      	bne.n	192 <TIM_DeInit+0x192>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:174
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 178:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 17c:	f04f 0101 	mov.w	r1, #1	; 0x1
 180:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:175
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 184:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 188:	f04f 0100 	mov.w	r1, #0	; 0x0
 18c:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 190:	e08a      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:177
  }  
  else if (TIMx == TIM11) 
 192:	687a      	ldr	r2, [r7, #4]
 194:	f245 4300 	movw	r3, #21504	; 0x5400
 198:	f2c4 0301 	movt	r3, #16385	; 0x4001
 19c:	429a      	cmp	r2, r3
 19e:	d10c      	bne.n	1ba <TIM_DeInit+0x1ba>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:179
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 1a0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 1a4:	f04f 0101 	mov.w	r1, #1	; 0x1
 1a8:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:180
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 1ac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 1b0:	f04f 0100 	mov.w	r1, #0	; 0x0
 1b4:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 1b8:	e076      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:182
  }  
  else if (TIMx == TIM12)
 1ba:	687a      	ldr	r2, [r7, #4]
 1bc:	f641 0300 	movw	r3, #6144	; 0x1800
 1c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 1c4:	429a      	cmp	r2, r3
 1c6:	d10c      	bne.n	1e2 <TIM_DeInit+0x1e2>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:184
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 1c8:	f04f 0040 	mov.w	r0, #64	; 0x40
 1cc:	f04f 0101 	mov.w	r1, #1	; 0x1
 1d0:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:185
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 1d4:	f04f 0040 	mov.w	r0, #64	; 0x40
 1d8:	f04f 0100 	mov.w	r1, #0	; 0x0
 1dc:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
 1e0:	e062      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:187
  }  
  else if (TIMx == TIM13) 
 1e2:	687a      	ldr	r2, [r7, #4]
 1e4:	f641 4300 	movw	r3, #7168	; 0x1c00
 1e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 1ec:	429a      	cmp	r2, r3
 1ee:	d10c      	bne.n	20a <TIM_DeInit+0x20a>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:189
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 1f0:	f04f 0080 	mov.w	r0, #128	; 0x80
 1f4:	f04f 0101 	mov.w	r1, #1	; 0x1
 1f8:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:190
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 1fc:	f04f 0080 	mov.w	r0, #128	; 0x80
 200:	f04f 0100 	mov.w	r1, #0	; 0x0
 204:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
 208:	e04e      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:192
  }
  else if (TIMx == TIM14) 
 20a:	687a      	ldr	r2, [r7, #4]
 20c:	f242 0300 	movw	r3, #8192	; 0x2000
 210:	f2c4 0300 	movt	r3, #16384	; 0x4000
 214:	429a      	cmp	r2, r3
 216:	d10c      	bne.n	232 <TIM_DeInit+0x232>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:194
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 218:	f44f 7080 	mov.w	r0, #256	; 0x100
 21c:	f04f 0101 	mov.w	r1, #1	; 0x1
 220:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:195
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 224:	f44f 7080 	mov.w	r0, #256	; 0x100
 228:	f04f 0100 	mov.w	r1, #0	; 0x0
 22c:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
 230:	e03a      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:197
  }        
  else if (TIMx == TIM15)
 232:	687a      	ldr	r2, [r7, #4]
 234:	f244 0300 	movw	r3, #16384	; 0x4000
 238:	f2c4 0301 	movt	r3, #16385	; 0x4001
 23c:	429a      	cmp	r2, r3
 23e:	d10c      	bne.n	25a <TIM_DeInit+0x25a>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:199
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 240:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 244:	f04f 0101 	mov.w	r1, #1	; 0x1
 248:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:200
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 24c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 250:	f04f 0100 	mov.w	r1, #0	; 0x0
 254:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 258:	e026      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:202
  } 
  else if (TIMx == TIM16)
 25a:	687a      	ldr	r2, [r7, #4]
 25c:	f244 4300 	movw	r3, #17408	; 0x4400
 260:	f2c4 0301 	movt	r3, #16385	; 0x4001
 264:	429a      	cmp	r2, r3
 266:	d10c      	bne.n	282 <TIM_DeInit+0x282>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:204
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 268:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 26c:	f04f 0101 	mov.w	r1, #1	; 0x1
 270:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:205
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 274:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 278:	f04f 0100 	mov.w	r1, #0	; 0x0
 27c:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 280:	e012      	b.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:209
  } 
  else
  {
    if (TIMx == TIM17)
 282:	687a      	ldr	r2, [r7, #4]
 284:	f644 0300 	movw	r3, #18432	; 0x4800
 288:	f2c4 0301 	movt	r3, #16385	; 0x4001
 28c:	429a      	cmp	r2, r3
 28e:	d10b      	bne.n	2a8 <TIM_DeInit+0x2a8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:211
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 290:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 294:	f04f 0101 	mov.w	r1, #1	; 0x1
 298:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:212
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 29c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 2a0:	f04f 0100 	mov.w	r1, #0	; 0x0
 2a4:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:215
    }  
  }
}
 2a8:	f107 0708 	add.w	r7, r7, #8	; 0x8
 2ac:	46bd      	mov	sp, r7
 2ae:	bd80      	pop	{r7, pc}
Disassembly of section .text.TIM_TimeBaseInit:

00000000 <TIM_TimeBaseInit>:
TIM_TimeBaseInit():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:227
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:228
  uint16_t tmpcr1 = 0;
   a:	f04f 0300 	mov.w	r3, #0	; 0x0
   e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:235
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
  10:	687b      	ldr	r3, [r7, #4]
  12:	881b      	ldrh	r3, [r3, #0]
  14:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:237

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
  16:	687a      	ldr	r2, [r7, #4]
  18:	f642 4300 	movw	r3, #11264	; 0x2c00
  1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
  20:	429a      	cmp	r2, r3
  22:	d01f      	beq.n	64 <RCC_APB2PeriphResetCmd+0x64>
  24:	687a      	ldr	r2, [r7, #4]
  26:	f243 4300 	movw	r3, #13312	; 0x3400
  2a:	f2c4 0301 	movt	r3, #16385	; 0x4001
  2e:	429a      	cmp	r2, r3
  30:	d018      	beq.n	64 <RCC_APB2PeriphResetCmd+0x64>
  32:	687b      	ldr	r3, [r7, #4]
  34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  38:	d014      	beq.n	64 <RCC_APB2PeriphResetCmd+0x64>
  3a:	687a      	ldr	r2, [r7, #4]
  3c:	f240 4300 	movw	r3, #1024	; 0x400
  40:	f2c4 0300 	movt	r3, #16384	; 0x4000
  44:	429a      	cmp	r2, r3
  46:	d00d      	beq.n	64 <RCC_APB2PeriphResetCmd+0x64>
  48:	687a      	ldr	r2, [r7, #4]
  4a:	f640 0300 	movw	r3, #2048	; 0x800
  4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
  52:	429a      	cmp	r2, r3
  54:	d006      	beq.n	64 <RCC_APB2PeriphResetCmd+0x64>
  56:	687a      	ldr	r2, [r7, #4]
  58:	f640 4300 	movw	r3, #3072	; 0xc00
  5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
  60:	429a      	cmp	r2, r3
  62:	d109      	bne.n	78 <RCC_APB2PeriphResetCmd+0x78>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:241
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
  64:	89fb      	ldrh	r3, [r7, #14]
  66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  6a:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:242
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
  6c:	683b      	ldr	r3, [r7, #0]
  6e:	885a      	ldrh	r2, [r3, #2]
  70:	89fb      	ldrh	r3, [r7, #14]
  72:	ea42 0303 	orr.w	r3, r2, r3
  76:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:245
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  78:	687a      	ldr	r2, [r7, #4]
  7a:	f241 0300 	movw	r3, #4096	; 0x1000
  7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
  82:	429a      	cmp	r2, r3
  84:	d010      	beq.n	a8 <RCC_APB2PeriphResetCmd+0xa8>
  86:	687a      	ldr	r2, [r7, #4]
  88:	f241 4300 	movw	r3, #5120	; 0x1400
  8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
  90:	429a      	cmp	r2, r3
  92:	d009      	beq.n	a8 <RCC_APB2PeriphResetCmd+0xa8>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:248
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
  94:	89fb      	ldrh	r3, [r7, #14]
  96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  9a:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:249
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  9c:	683b      	ldr	r3, [r7, #0]
  9e:	88da      	ldrh	r2, [r3, #6]
  a0:	89fb      	ldrh	r3, [r7, #14]
  a2:	ea42 0303 	orr.w	r3, r2, r3
  a6:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:252
  }

  TIMx->CR1 = tmpcr1;
  a8:	687a      	ldr	r2, [r7, #4]
  aa:	89fb      	ldrh	r3, [r7, #14]
  ac:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:255

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
  ae:	683b      	ldr	r3, [r7, #0]
  b0:	889b      	ldrh	r3, [r3, #4]
  b2:	687a      	ldr	r2, [r7, #4]
  b4:	8593      	strh	r3, [r2, #44]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:258
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
  b6:	683b      	ldr	r3, [r7, #0]
  b8:	881b      	ldrh	r3, [r3, #0]
  ba:	687a      	ldr	r2, [r7, #4]
  bc:	8513      	strh	r3, [r2, #40]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:260
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
  be:	687a      	ldr	r2, [r7, #4]
  c0:	f642 4300 	movw	r3, #11264	; 0x2c00
  c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
  c8:	429a      	cmp	r2, r3
  ca:	d01b      	beq.n	104 <RCC_APB2PeriphResetCmd+0x104>
  cc:	687a      	ldr	r2, [r7, #4]
  ce:	f243 4300 	movw	r3, #13312	; 0x3400
  d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
  d6:	429a      	cmp	r2, r3
  d8:	d014      	beq.n	104 <RCC_APB2PeriphResetCmd+0x104>
  da:	687a      	ldr	r2, [r7, #4]
  dc:	f244 0300 	movw	r3, #16384	; 0x4000
  e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
  e4:	429a      	cmp	r2, r3
  e6:	d00d      	beq.n	104 <RCC_APB2PeriphResetCmd+0x104>
  e8:	687a      	ldr	r2, [r7, #4]
  ea:	f244 4300 	movw	r3, #17408	; 0x4400
  ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
  f2:	429a      	cmp	r2, r3
  f4:	d006      	beq.n	104 <RCC_APB2PeriphResetCmd+0x104>
  f6:	687a      	ldr	r2, [r7, #4]
  f8:	f644 0300 	movw	r3, #18432	; 0x4800
  fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 100:	429a      	cmp	r2, r3
 102:	d103      	bne.n	10c <RCC_APB2PeriphResetCmd+0x10c>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:263
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 104:	683b      	ldr	r3, [r7, #0]
 106:	7a1b      	ldrb	r3, [r3, #8]
 108:	687a      	ldr	r2, [r7, #4]
 10a:	8613      	strh	r3, [r2, #48]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:268
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 10c:	687b      	ldr	r3, [r7, #4]
 10e:	f04f 0201 	mov.w	r2, #1	; 0x1
 112:	829a      	strh	r2, [r3, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:269
}
 114:	f107 0714 	add.w	r7, r7, #20	; 0x14
 118:	46bd      	mov	sp, r7
 11a:	bc80      	pop	{r7}
 11c:	4770      	bx	lr
 11e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC1Init:

00000000 <TIM_OC1Init>:
TIM_OC1Init():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:280
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	60b9      	str	r1, [r7, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:281
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   a:	f04f 0300 	mov.w	r3, #0	; 0x0
   e:	827b      	strh	r3, [r7, #18]
  10:	f04f 0300 	mov.w	r3, #0	; 0x0
  14:	82bb      	strh	r3, [r7, #20]
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:289
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
  1c:	68fb      	ldr	r3, [r7, #12]
  1e:	8c1b      	ldrh	r3, [r3, #32]
  20:	b29b      	uxth	r3, r3
  22:	607b      	str	r3, [r7, #4]
  24:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  28:	f2c0 0300 	movt	r3, #0	; 0x0
  2c:	6879      	ldr	r1, [r7, #4]
  2e:	ea01 0303 	and.w	r3, r1, r3
  32:	607b      	str	r3, [r7, #4]
  34:	68fa      	ldr	r2, [r7, #12]
  36:	6879      	ldr	r1, [r7, #4]
  38:	460b      	mov	r3, r1
  3a:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:291
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  3c:	68fb      	ldr	r3, [r7, #12]
  3e:	8c1b      	ldrh	r3, [r3, #32]
  40:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:293
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  42:	68fb      	ldr	r3, [r7, #12]
  44:	889b      	ldrh	r3, [r3, #4]
  46:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:296
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  48:	68fb      	ldr	r3, [r7, #12]
  4a:	8b1b      	ldrh	r3, [r3, #24]
  4c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:299
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  4e:	8a7b      	ldrh	r3, [r7, #18]
  50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  54:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:300
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
  56:	8a7b      	ldrh	r3, [r7, #18]
  58:	f023 0303 	bic.w	r3, r3, #3	; 0x3
  5c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:303

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  5e:	68bb      	ldr	r3, [r7, #8]
  60:	881a      	ldrh	r2, [r3, #0]
  62:	8a7b      	ldrh	r3, [r7, #18]
  64:	ea42 0303 	orr.w	r3, r2, r3
  68:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:306
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  6a:	8abb      	ldrh	r3, [r7, #20]
  6c:	f023 0302 	bic.w	r3, r3, #2	; 0x2
  70:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:308
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  72:	68bb      	ldr	r3, [r7, #8]
  74:	891a      	ldrh	r2, [r3, #8]
  76:	8abb      	ldrh	r3, [r7, #20]
  78:	ea42 0303 	orr.w	r3, r2, r3
  7c:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:311
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  7e:	68bb      	ldr	r3, [r7, #8]
  80:	885a      	ldrh	r2, [r3, #2]
  82:	8abb      	ldrh	r3, [r7, #20]
  84:	ea42 0303 	orr.w	r3, r2, r3
  88:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:313
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
  8a:	68fa      	ldr	r2, [r7, #12]
  8c:	f642 4300 	movw	r3, #11264	; 0x2c00
  90:	f2c4 0301 	movt	r3, #16385	; 0x4001
  94:	429a      	cmp	r2, r3
  96:	d01b      	beq.n	d0 <RCC_APB2PeriphResetCmd+0xd0>
  98:	68fa      	ldr	r2, [r7, #12]
  9a:	f243 4300 	movw	r3, #13312	; 0x3400
  9e:	f2c4 0301 	movt	r3, #16385	; 0x4001
  a2:	429a      	cmp	r2, r3
  a4:	d014      	beq.n	d0 <RCC_APB2PeriphResetCmd+0xd0>
  a6:	68fa      	ldr	r2, [r7, #12]
  a8:	f244 0300 	movw	r3, #16384	; 0x4000
  ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
  b0:	429a      	cmp	r2, r3
  b2:	d00d      	beq.n	d0 <RCC_APB2PeriphResetCmd+0xd0>
  b4:	68fa      	ldr	r2, [r7, #12]
  b6:	f244 4300 	movw	r3, #17408	; 0x4400
  ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
  be:	429a      	cmp	r2, r3
  c0:	d006      	beq.n	d0 <RCC_APB2PeriphResetCmd+0xd0>
  c2:	68fa      	ldr	r2, [r7, #12]
  c4:	f644 0300 	movw	r3, #18432	; 0x4800
  c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
  cc:	429a      	cmp	r2, r3
  ce:	d127      	bne.n	120 <RCC_APB2PeriphResetCmd+0x120>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:322
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
  d0:	8abb      	ldrh	r3, [r7, #20]
  d2:	f023 0308 	bic.w	r3, r3, #8	; 0x8
  d6:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:324
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
  d8:	68bb      	ldr	r3, [r7, #8]
  da:	895a      	ldrh	r2, [r3, #10]
  dc:	8abb      	ldrh	r3, [r7, #20]
  de:	ea42 0303 	orr.w	r3, r2, r3
  e2:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:327
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
  e4:	8abb      	ldrh	r3, [r7, #20]
  e6:	f023 0304 	bic.w	r3, r3, #4	; 0x4
  ea:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:329
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
  ec:	68bb      	ldr	r3, [r7, #8]
  ee:	889a      	ldrh	r2, [r3, #4]
  f0:	8abb      	ldrh	r3, [r7, #20]
  f2:	ea42 0303 	orr.w	r3, r2, r3
  f6:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:332
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
  f8:	8afb      	ldrh	r3, [r7, #22]
  fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  fe:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:333
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 100:	8afb      	ldrh	r3, [r7, #22]
 102:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 106:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:336
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 108:	68bb      	ldr	r3, [r7, #8]
 10a:	899a      	ldrh	r2, [r3, #12]
 10c:	8afb      	ldrh	r3, [r7, #22]
 10e:	ea42 0303 	orr.w	r3, r2, r3
 112:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:338
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 114:	68bb      	ldr	r3, [r7, #8]
 116:	89da      	ldrh	r2, [r3, #14]
 118:	8afb      	ldrh	r3, [r7, #22]
 11a:	ea42 0303 	orr.w	r3, r2, r3
 11e:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:341
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 120:	68fa      	ldr	r2, [r7, #12]
 122:	8afb      	ldrh	r3, [r7, #22]
 124:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:344
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 126:	68fa      	ldr	r2, [r7, #12]
 128:	8a7b      	ldrh	r3, [r7, #18]
 12a:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:347

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 12c:	68bb      	ldr	r3, [r7, #8]
 12e:	88db      	ldrh	r3, [r3, #6]
 130:	68fa      	ldr	r2, [r7, #12]
 132:	8693      	strh	r3, [r2, #52]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:350
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 134:	68fa      	ldr	r2, [r7, #12]
 136:	8abb      	ldrh	r3, [r7, #20]
 138:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:351
}
 13a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
 13e:	46bd      	mov	sp, r7
 140:	bc80      	pop	{r7}
 142:	4770      	bx	lr
Disassembly of section .text.TIM_OC2Init:

00000000 <TIM_OC2Init>:
TIM_OC2Init():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:363
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	60b9      	str	r1, [r7, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:364
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   a:	f04f 0300 	mov.w	r3, #0	; 0x0
   e:	827b      	strh	r3, [r7, #18]
  10:	f04f 0300 	mov.w	r3, #0	; 0x0
  14:	82bb      	strh	r3, [r7, #20]
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:372
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
  1c:	68fb      	ldr	r3, [r7, #12]
  1e:	8c1b      	ldrh	r3, [r3, #32]
  20:	b29b      	uxth	r3, r3
  22:	607b      	str	r3, [r7, #4]
  24:	f64f 73ef 	movw	r3, #65519	; 0xffef
  28:	f2c0 0300 	movt	r3, #0	; 0x0
  2c:	6879      	ldr	r1, [r7, #4]
  2e:	ea01 0303 	and.w	r3, r1, r3
  32:	607b      	str	r3, [r7, #4]
  34:	68fa      	ldr	r2, [r7, #12]
  36:	6879      	ldr	r1, [r7, #4]
  38:	460b      	mov	r3, r1
  3a:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:375
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  3c:	68fb      	ldr	r3, [r7, #12]
  3e:	8c1b      	ldrh	r3, [r3, #32]
  40:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:377
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  42:	68fb      	ldr	r3, [r7, #12]
  44:	889b      	ldrh	r3, [r3, #4]
  46:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:380
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  48:	68fb      	ldr	r3, [r7, #12]
  4a:	8b1b      	ldrh	r3, [r3, #24]
  4c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:383
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  4e:	8a7b      	ldrh	r3, [r7, #18]
  50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  54:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:384
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  56:	8a7b      	ldrh	r3, [r7, #18]
  58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  5c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:387
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  5e:	68bb      	ldr	r3, [r7, #8]
  60:	881b      	ldrh	r3, [r3, #0]
  62:	ea4f 2303 	mov.w	r3, r3, lsl #8
  66:	b29a      	uxth	r2, r3
  68:	8a7b      	ldrh	r3, [r7, #18]
  6a:	ea42 0303 	orr.w	r3, r2, r3
  6e:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:390
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  70:	8abb      	ldrh	r3, [r7, #20]
  72:	f023 0320 	bic.w	r3, r3, #32	; 0x20
  76:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:392
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  78:	68bb      	ldr	r3, [r7, #8]
  7a:	891b      	ldrh	r3, [r3, #8]
  7c:	ea4f 1303 	mov.w	r3, r3, lsl #4
  80:	b29a      	uxth	r2, r3
  82:	8abb      	ldrh	r3, [r7, #20]
  84:	ea42 0303 	orr.w	r3, r2, r3
  88:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:395
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
  8a:	68bb      	ldr	r3, [r7, #8]
  8c:	885b      	ldrh	r3, [r3, #2]
  8e:	ea4f 1303 	mov.w	r3, r3, lsl #4
  92:	b29a      	uxth	r2, r3
  94:	8abb      	ldrh	r3, [r7, #20]
  96:	ea42 0303 	orr.w	r3, r2, r3
  9a:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:397
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  9c:	68fa      	ldr	r2, [r7, #12]
  9e:	f642 4300 	movw	r3, #11264	; 0x2c00
  a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
  a6:	429a      	cmp	r2, r3
  a8:	d006      	beq.n	b8 <RCC_APB2PeriphResetCmd+0xb8>
  aa:	68fa      	ldr	r2, [r7, #12]
  ac:	f243 4300 	movw	r3, #13312	; 0x3400
  b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
  b4:	429a      	cmp	r2, r3
  b6:	d133      	bne.n	120 <RCC_APB2PeriphResetCmd+0x120>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:405
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
  b8:	8abb      	ldrh	r3, [r7, #20]
  ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  be:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:407
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
  c0:	68bb      	ldr	r3, [r7, #8]
  c2:	895b      	ldrh	r3, [r3, #10]
  c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
  c8:	b29a      	uxth	r2, r3
  ca:	8abb      	ldrh	r3, [r7, #20]
  cc:	ea42 0303 	orr.w	r3, r2, r3
  d0:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:410
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
  d2:	8abb      	ldrh	r3, [r7, #20]
  d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  d8:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:412
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
  da:	68bb      	ldr	r3, [r7, #8]
  dc:	889b      	ldrh	r3, [r3, #4]
  de:	ea4f 1303 	mov.w	r3, r3, lsl #4
  e2:	b29a      	uxth	r2, r3
  e4:	8abb      	ldrh	r3, [r7, #20]
  e6:	ea42 0303 	orr.w	r3, r2, r3
  ea:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:415
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
  ec:	8afb      	ldrh	r3, [r7, #22]
  ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  f2:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:416
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
  f4:	8afb      	ldrh	r3, [r7, #22]
  f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  fa:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:419
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
  fc:	68bb      	ldr	r3, [r7, #8]
  fe:	899b      	ldrh	r3, [r3, #12]
 100:	ea4f 0383 	mov.w	r3, r3, lsl #2
 104:	b29a      	uxth	r2, r3
 106:	8afb      	ldrh	r3, [r7, #22]
 108:	ea42 0303 	orr.w	r3, r2, r3
 10c:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:421
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 10e:	68bb      	ldr	r3, [r7, #8]
 110:	89db      	ldrh	r3, [r3, #14]
 112:	ea4f 0383 	mov.w	r3, r3, lsl #2
 116:	b29a      	uxth	r2, r3
 118:	8afb      	ldrh	r3, [r7, #22]
 11a:	ea42 0303 	orr.w	r3, r2, r3
 11e:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:424
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 120:	68fa      	ldr	r2, [r7, #12]
 122:	8afb      	ldrh	r3, [r7, #22]
 124:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:427
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 126:	68fa      	ldr	r2, [r7, #12]
 128:	8a7b      	ldrh	r3, [r7, #18]
 12a:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:430

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 12c:	68bb      	ldr	r3, [r7, #8]
 12e:	88db      	ldrh	r3, [r3, #6]
 130:	68fa      	ldr	r2, [r7, #12]
 132:	8713      	strh	r3, [r2, #56]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:433
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 134:	68fa      	ldr	r2, [r7, #12]
 136:	8abb      	ldrh	r3, [r7, #20]
 138:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:434
}
 13a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
 13e:	46bd      	mov	sp, r7
 140:	bc80      	pop	{r7}
 142:	4770      	bx	lr
Disassembly of section .text.TIM_OC3Init:

00000000 <TIM_OC3Init>:
TIM_OC3Init():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:445
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	60b9      	str	r1, [r7, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:446
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   a:	f04f 0300 	mov.w	r3, #0	; 0x0
   e:	827b      	strh	r3, [r7, #18]
  10:	f04f 0300 	mov.w	r3, #0	; 0x0
  14:	82bb      	strh	r3, [r7, #20]
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:454
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
  1c:	68fb      	ldr	r3, [r7, #12]
  1e:	8c1b      	ldrh	r3, [r3, #32]
  20:	b29b      	uxth	r3, r3
  22:	607b      	str	r3, [r7, #4]
  24:	f64f 63ff 	movw	r3, #65279	; 0xfeff
  28:	f2c0 0300 	movt	r3, #0	; 0x0
  2c:	6879      	ldr	r1, [r7, #4]
  2e:	ea01 0303 	and.w	r3, r1, r3
  32:	607b      	str	r3, [r7, #4]
  34:	68fa      	ldr	r2, [r7, #12]
  36:	6879      	ldr	r1, [r7, #4]
  38:	460b      	mov	r3, r1
  3a:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:457
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  3c:	68fb      	ldr	r3, [r7, #12]
  3e:	8c1b      	ldrh	r3, [r3, #32]
  40:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:459
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  42:	68fb      	ldr	r3, [r7, #12]
  44:	889b      	ldrh	r3, [r3, #4]
  46:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:462
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  48:	68fb      	ldr	r3, [r7, #12]
  4a:	8b9b      	ldrh	r3, [r3, #28]
  4c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:465
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  4e:	8a7b      	ldrh	r3, [r7, #18]
  50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  54:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:466
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  56:	8a7b      	ldrh	r3, [r7, #18]
  58:	f023 0303 	bic.w	r3, r3, #3	; 0x3
  5c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:468
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  5e:	68bb      	ldr	r3, [r7, #8]
  60:	881a      	ldrh	r2, [r3, #0]
  62:	8a7b      	ldrh	r3, [r7, #18]
  64:	ea42 0303 	orr.w	r3, r2, r3
  68:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:471
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  6a:	8abb      	ldrh	r3, [r7, #20]
  6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  70:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:473
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  72:	68bb      	ldr	r3, [r7, #8]
  74:	891b      	ldrh	r3, [r3, #8]
  76:	ea4f 2303 	mov.w	r3, r3, lsl #8
  7a:	b29a      	uxth	r2, r3
  7c:	8abb      	ldrh	r3, [r7, #20]
  7e:	ea42 0303 	orr.w	r3, r2, r3
  82:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:476
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
  84:	68bb      	ldr	r3, [r7, #8]
  86:	885b      	ldrh	r3, [r3, #2]
  88:	ea4f 2303 	mov.w	r3, r3, lsl #8
  8c:	b29a      	uxth	r2, r3
  8e:	8abb      	ldrh	r3, [r7, #20]
  90:	ea42 0303 	orr.w	r3, r2, r3
  94:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:478
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  96:	68fa      	ldr	r2, [r7, #12]
  98:	f642 4300 	movw	r3, #11264	; 0x2c00
  9c:	f2c4 0301 	movt	r3, #16385	; 0x4001
  a0:	429a      	cmp	r2, r3
  a2:	d006      	beq.n	b2 <RCC_APB2PeriphResetCmd+0xb2>
  a4:	68fa      	ldr	r2, [r7, #12]
  a6:	f243 4300 	movw	r3, #13312	; 0x3400
  aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
  ae:	429a      	cmp	r2, r3
  b0:	d133      	bne.n	11a <RCC_APB2PeriphResetCmd+0x11a>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:486
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
  b2:	8abb      	ldrh	r3, [r7, #20]
  b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  b8:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:488
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
  ba:	68bb      	ldr	r3, [r7, #8]
  bc:	895b      	ldrh	r3, [r3, #10]
  be:	ea4f 2303 	mov.w	r3, r3, lsl #8
  c2:	b29a      	uxth	r2, r3
  c4:	8abb      	ldrh	r3, [r7, #20]
  c6:	ea42 0303 	orr.w	r3, r2, r3
  ca:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:490
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
  cc:	8abb      	ldrh	r3, [r7, #20]
  ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  d2:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:493
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
  d4:	68bb      	ldr	r3, [r7, #8]
  d6:	889b      	ldrh	r3, [r3, #4]
  d8:	ea4f 2303 	mov.w	r3, r3, lsl #8
  dc:	b29a      	uxth	r2, r3
  de:	8abb      	ldrh	r3, [r7, #20]
  e0:	ea42 0303 	orr.w	r3, r2, r3
  e4:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:495
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
  e6:	8afb      	ldrh	r3, [r7, #22]
  e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  ec:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:496
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
  ee:	8afb      	ldrh	r3, [r7, #22]
  f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  f4:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:498
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
  f6:	68bb      	ldr	r3, [r7, #8]
  f8:	899b      	ldrh	r3, [r3, #12]
  fa:	ea4f 1303 	mov.w	r3, r3, lsl #4
  fe:	b29a      	uxth	r2, r3
 100:	8afb      	ldrh	r3, [r7, #22]
 102:	ea42 0303 	orr.w	r3, r2, r3
 106:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:500
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 108:	68bb      	ldr	r3, [r7, #8]
 10a:	89db      	ldrh	r3, [r3, #14]
 10c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 110:	b29a      	uxth	r2, r3
 112:	8afb      	ldrh	r3, [r7, #22]
 114:	ea42 0303 	orr.w	r3, r2, r3
 118:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:503
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 11a:	68fa      	ldr	r2, [r7, #12]
 11c:	8afb      	ldrh	r3, [r7, #22]
 11e:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:506
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 120:	68fa      	ldr	r2, [r7, #12]
 122:	8a7b      	ldrh	r3, [r7, #18]
 124:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:509

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 126:	68bb      	ldr	r3, [r7, #8]
 128:	88db      	ldrh	r3, [r3, #6]
 12a:	68fa      	ldr	r2, [r7, #12]
 12c:	8793      	strh	r3, [r2, #60]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:512
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 12e:	68fa      	ldr	r2, [r7, #12]
 130:	8abb      	ldrh	r3, [r7, #20]
 132:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:513
}
 134:	f107 071c 	add.w	r7, r7, #28	; 0x1c
 138:	46bd      	mov	sp, r7
 13a:	bc80      	pop	{r7}
 13c:	4770      	bx	lr
 13e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC4Init:

00000000 <TIM_OC4Init>:
TIM_OC4Init():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:524
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	60b9      	str	r1, [r7, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:525
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   a:	f04f 0300 	mov.w	r3, #0	; 0x0
   e:	827b      	strh	r3, [r7, #18]
  10:	f04f 0300 	mov.w	r3, #0	; 0x0
  14:	82bb      	strh	r3, [r7, #20]
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:533
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  1c:	68fb      	ldr	r3, [r7, #12]
  1e:	8c1b      	ldrh	r3, [r3, #32]
  20:	b29b      	uxth	r3, r3
  22:	607b      	str	r3, [r7, #4]
  24:	f64e 73ff 	movw	r3, #61439	; 0xefff
  28:	f2c0 0300 	movt	r3, #0	; 0x0
  2c:	6879      	ldr	r1, [r7, #4]
  2e:	ea01 0303 	and.w	r3, r1, r3
  32:	607b      	str	r3, [r7, #4]
  34:	68fa      	ldr	r2, [r7, #12]
  36:	6879      	ldr	r1, [r7, #4]
  38:	460b      	mov	r3, r1
  3a:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:536
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  3c:	68fb      	ldr	r3, [r7, #12]
  3e:	8c1b      	ldrh	r3, [r3, #32]
  40:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:538
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  42:	68fb      	ldr	r3, [r7, #12]
  44:	889b      	ldrh	r3, [r3, #4]
  46:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:541
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  48:	68fb      	ldr	r3, [r7, #12]
  4a:	8b9b      	ldrh	r3, [r3, #28]
  4c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:544
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  4e:	8a7b      	ldrh	r3, [r7, #18]
  50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  54:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:545
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  56:	8a7b      	ldrh	r3, [r7, #18]
  58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  5c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:548
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  5e:	68bb      	ldr	r3, [r7, #8]
  60:	881b      	ldrh	r3, [r3, #0]
  62:	ea4f 2303 	mov.w	r3, r3, lsl #8
  66:	b29a      	uxth	r2, r3
  68:	8a7b      	ldrh	r3, [r7, #18]
  6a:	ea42 0303 	orr.w	r3, r2, r3
  6e:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:551
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  70:	8abb      	ldrh	r3, [r7, #20]
  72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  76:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:553
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  78:	68bb      	ldr	r3, [r7, #8]
  7a:	891b      	ldrh	r3, [r3, #8]
  7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  80:	b29a      	uxth	r2, r3
  82:	8abb      	ldrh	r3, [r7, #20]
  84:	ea42 0303 	orr.w	r3, r2, r3
  88:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:556
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  8a:	68bb      	ldr	r3, [r7, #8]
  8c:	885b      	ldrh	r3, [r3, #2]
  8e:	ea4f 3303 	mov.w	r3, r3, lsl #12
  92:	b29a      	uxth	r2, r3
  94:	8abb      	ldrh	r3, [r7, #20]
  96:	ea42 0303 	orr.w	r3, r2, r3
  9a:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:558
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  9c:	68fa      	ldr	r2, [r7, #12]
  9e:	f642 4300 	movw	r3, #11264	; 0x2c00
  a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
  a6:	429a      	cmp	r2, r3
  a8:	d006      	beq.n	b8 <RCC_APB2PeriphResetCmd+0xb8>
  aa:	68fa      	ldr	r2, [r7, #12]
  ac:	f243 4300 	movw	r3, #13312	; 0x3400
  b0:	f2c4 0301 	movt	r3, #16385	; 0x4001
  b4:	429a      	cmp	r2, r3
  b6:	d10c      	bne.n	d2 <RCC_APB2PeriphResetCmd+0xd2>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:562
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
  b8:	8afb      	ldrh	r3, [r7, #22]
  ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  be:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:564
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  c0:	68bb      	ldr	r3, [r7, #8]
  c2:	899b      	ldrh	r3, [r3, #12]
  c4:	ea4f 1383 	mov.w	r3, r3, lsl #6
  c8:	b29a      	uxth	r2, r3
  ca:	8afb      	ldrh	r3, [r7, #22]
  cc:	ea42 0303 	orr.w	r3, r2, r3
  d0:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:567
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  d2:	68fa      	ldr	r2, [r7, #12]
  d4:	8afb      	ldrh	r3, [r7, #22]
  d6:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:570
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
  d8:	68fa      	ldr	r2, [r7, #12]
  da:	8a7b      	ldrh	r3, [r7, #18]
  dc:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:573

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  de:	68bb      	ldr	r3, [r7, #8]
  e0:	88db      	ldrh	r3, [r3, #6]
  e2:	68fa      	ldr	r2, [r7, #12]
  e4:	f8a2 3040 	strh.w	r3, [r2, #64]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:576
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  e8:	68fa      	ldr	r2, [r7, #12]
  ea:	8abb      	ldrh	r3, [r7, #20]
  ec:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:577
}
  ee:	f107 071c 	add.w	r7, r7, #28	; 0x1c
  f2:	46bd      	mov	sp, r7
  f4:	bc80      	pop	{r7}
  f6:	4770      	bx	lr
Disassembly of section .text.TIM_ICInit:

00000000 <TIM_ICInit>:
TIM_ICInit():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:588
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:604
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   a:	683b      	ldr	r3, [r7, #0]
   c:	881b      	ldrh	r3, [r3, #0]
   e:	2b00      	cmp	r3, #0
  10:	d10f      	bne.n	32 <TIM_ICInit+0x32>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:608
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  12:	683b      	ldr	r3, [r7, #0]
  14:	8859      	ldrh	r1, [r3, #2]
  16:	683b      	ldr	r3, [r7, #0]
  18:	889a      	ldrh	r2, [r3, #4]
  1a:	683b      	ldr	r3, [r7, #0]
  1c:	891b      	ldrh	r3, [r3, #8]
  1e:	6878      	ldr	r0, [r7, #4]
  20:	f7ff fffe 	bl	0 <TIM_ICInit>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:612
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  24:	683b      	ldr	r3, [r7, #0]
  26:	88db      	ldrh	r3, [r3, #6]
  28:	6878      	ldr	r0, [r7, #4]
  2a:	4619      	mov	r1, r3
  2c:	f7ff fffe 	bl	0 <TIM_ICInit>
  30:	e036      	b.n	a0 <TIM_ICInit+0xa0>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:614
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  32:	683b      	ldr	r3, [r7, #0]
  34:	881b      	ldrh	r3, [r3, #0]
  36:	2b04      	cmp	r3, #4
  38:	d10f      	bne.n	5a <TIM_ICInit+0x5a>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:618
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  3a:	683b      	ldr	r3, [r7, #0]
  3c:	8859      	ldrh	r1, [r3, #2]
  3e:	683b      	ldr	r3, [r7, #0]
  40:	889a      	ldrh	r2, [r3, #4]
  42:	683b      	ldr	r3, [r7, #0]
  44:	891b      	ldrh	r3, [r3, #8]
  46:	6878      	ldr	r0, [r7, #4]
  48:	f7ff fffe 	bl	0 <TIM_ICInit>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:622
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  4c:	683b      	ldr	r3, [r7, #0]
  4e:	88db      	ldrh	r3, [r3, #6]
  50:	6878      	ldr	r0, [r7, #4]
  52:	4619      	mov	r1, r3
  54:	f7ff fffe 	bl	0 <TIM_ICInit>
  58:	e022      	b.n	a0 <TIM_ICInit+0xa0>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:624
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  5a:	683b      	ldr	r3, [r7, #0]
  5c:	881b      	ldrh	r3, [r3, #0]
  5e:	2b08      	cmp	r3, #8
  60:	d10f      	bne.n	82 <TIM_ICInit+0x82>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:628
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
  62:	683b      	ldr	r3, [r7, #0]
  64:	8859      	ldrh	r1, [r3, #2]
  66:	683b      	ldr	r3, [r7, #0]
  68:	889a      	ldrh	r2, [r3, #4]
  6a:	683b      	ldr	r3, [r7, #0]
  6c:	891b      	ldrh	r3, [r3, #8]
  6e:	6878      	ldr	r0, [r7, #4]
  70:	f7ff fffe 	bl	0 <TIM_ICInit>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:632
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  74:	683b      	ldr	r3, [r7, #0]
  76:	88db      	ldrh	r3, [r3, #6]
  78:	6878      	ldr	r0, [r7, #4]
  7a:	4619      	mov	r1, r3
  7c:	f7ff fffe 	bl	0 <TIM_ICInit>
  80:	e00e      	b.n	a0 <TIM_ICInit+0xa0>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:638
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  82:	683b      	ldr	r3, [r7, #0]
  84:	8859      	ldrh	r1, [r3, #2]
  86:	683b      	ldr	r3, [r7, #0]
  88:	889a      	ldrh	r2, [r3, #4]
  8a:	683b      	ldr	r3, [r7, #0]
  8c:	891b      	ldrh	r3, [r3, #8]
  8e:	6878      	ldr	r0, [r7, #4]
  90:	f7ff fffe 	bl	0 <TIM_ICInit>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:642
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  94:	683b      	ldr	r3, [r7, #0]
  96:	88db      	ldrh	r3, [r3, #6]
  98:	6878      	ldr	r0, [r7, #4]
  9a:	4619      	mov	r1, r3
  9c:	f7ff fffe 	bl	0 <TIM_ICInit>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:644
  }
}
  a0:	f107 0708 	add.w	r7, r7, #8	; 0x8
  a4:	46bd      	mov	sp, r7
  a6:	bd80      	pop	{r7, pc}
Disassembly of section .text.TIM_PWMIConfig:

00000000 <TIM_PWMIConfig>:
TIM_PWMIConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:655
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	b590      	push	{r4, r7, lr}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:656
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
   a:	f04f 0300 	mov.w	r3, #0	; 0x0
   e:	81bb      	strh	r3, [r7, #12]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:657
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  10:	f04f 0301 	mov.w	r3, #1	; 0x1
  14:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:661
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  16:	683b      	ldr	r3, [r7, #0]
  18:	885b      	ldrh	r3, [r3, #2]
  1a:	2b00      	cmp	r3, #0
  1c:	d103      	bne.n	26 <TIM_PWMIConfig+0x26>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:663
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  1e:	f04f 0302 	mov.w	r3, #2	; 0x2
  22:	81bb      	strh	r3, [r7, #12]
  24:	e002      	b.n	2c <TIM_PWMIConfig+0x2c>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:667
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  26:	f04f 0300 	mov.w	r3, #0	; 0x0
  2a:	81bb      	strh	r3, [r7, #12]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:670
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  2c:	683b      	ldr	r3, [r7, #0]
  2e:	889b      	ldrh	r3, [r3, #4]
  30:	2b01      	cmp	r3, #1
  32:	d103      	bne.n	3c <TIM_PWMIConfig+0x3c>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:672
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  34:	f04f 0302 	mov.w	r3, #2	; 0x2
  38:	81fb      	strh	r3, [r7, #14]
  3a:	e002      	b.n	42 <TIM_PWMIConfig+0x42>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:676
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  3c:	f04f 0301 	mov.w	r3, #1	; 0x1
  40:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:678
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  42:	683b      	ldr	r3, [r7, #0]
  44:	881b      	ldrh	r3, [r3, #0]
  46:	2b00      	cmp	r3, #0
  48:	d11e      	bne.n	88 <TIM_PWMIConfig+0x88>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:681
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  4a:	683b      	ldr	r3, [r7, #0]
  4c:	8859      	ldrh	r1, [r3, #2]
  4e:	683b      	ldr	r3, [r7, #0]
  50:	889a      	ldrh	r2, [r3, #4]
  52:	683b      	ldr	r3, [r7, #0]
  54:	891b      	ldrh	r3, [r3, #8]
  56:	6878      	ldr	r0, [r7, #4]
  58:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:684
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  5c:	683b      	ldr	r3, [r7, #0]
  5e:	88db      	ldrh	r3, [r3, #6]
  60:	6878      	ldr	r0, [r7, #4]
  62:	4619      	mov	r1, r3
  64:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:686
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
  68:	683b      	ldr	r3, [r7, #0]
  6a:	891c      	ldrh	r4, [r3, #8]
  6c:	89bb      	ldrh	r3, [r7, #12]
  6e:	89fa      	ldrh	r2, [r7, #14]
  70:	6878      	ldr	r0, [r7, #4]
  72:	4619      	mov	r1, r3
  74:	4623      	mov	r3, r4
  76:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:688
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  7a:	683b      	ldr	r3, [r7, #0]
  7c:	88db      	ldrh	r3, [r3, #6]
  7e:	6878      	ldr	r0, [r7, #4]
  80:	4619      	mov	r1, r3
  82:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
  86:	e01d      	b.n	c4 <TIM_PWMIConfig+0xc4>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:693
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  88:	683b      	ldr	r3, [r7, #0]
  8a:	8859      	ldrh	r1, [r3, #2]
  8c:	683b      	ldr	r3, [r7, #0]
  8e:	889a      	ldrh	r2, [r3, #4]
  90:	683b      	ldr	r3, [r7, #0]
  92:	891b      	ldrh	r3, [r3, #8]
  94:	6878      	ldr	r0, [r7, #4]
  96:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:696
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  9a:	683b      	ldr	r3, [r7, #0]
  9c:	88db      	ldrh	r3, [r3, #6]
  9e:	6878      	ldr	r0, [r7, #4]
  a0:	4619      	mov	r1, r3
  a2:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:698
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
  a6:	683b      	ldr	r3, [r7, #0]
  a8:	891c      	ldrh	r4, [r3, #8]
  aa:	89bb      	ldrh	r3, [r7, #12]
  ac:	89fa      	ldrh	r2, [r7, #14]
  ae:	6878      	ldr	r0, [r7, #4]
  b0:	4619      	mov	r1, r3
  b2:	4623      	mov	r3, r4
  b4:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:700
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  b8:	683b      	ldr	r3, [r7, #0]
  ba:	88db      	ldrh	r3, [r3, #6]
  bc:	6878      	ldr	r0, [r7, #4]
  be:	4619      	mov	r1, r3
  c0:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:702
  }
}
  c4:	f107 0714 	add.w	r7, r7, #20	; 0x14
  c8:	46bd      	mov	sp, r7
  ca:	bd90      	pop	{r4, r7, pc}
Disassembly of section .text.TIM_BDTRConfig:

00000000 <TIM_BDTRConfig>:
TIM_BDTRConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:713
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:724
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
   a:	683b      	ldr	r3, [r7, #0]
   c:	881a      	ldrh	r2, [r3, #0]
   e:	683b      	ldr	r3, [r7, #0]
  10:	885b      	ldrh	r3, [r3, #2]
  12:	ea42 0303 	orr.w	r3, r2, r3
  16:	b29a      	uxth	r2, r3
  18:	683b      	ldr	r3, [r7, #0]
  1a:	889b      	ldrh	r3, [r3, #4]
  1c:	ea42 0303 	orr.w	r3, r2, r3
  20:	b29a      	uxth	r2, r3
  22:	683b      	ldr	r3, [r7, #0]
  24:	88db      	ldrh	r3, [r3, #6]
  26:	ea42 0303 	orr.w	r3, r2, r3
  2a:	b29a      	uxth	r2, r3
  2c:	683b      	ldr	r3, [r7, #0]
  2e:	891b      	ldrh	r3, [r3, #8]
  30:	ea42 0303 	orr.w	r3, r2, r3
  34:	b29a      	uxth	r2, r3
  36:	683b      	ldr	r3, [r7, #0]
  38:	895b      	ldrh	r3, [r3, #10]
  3a:	ea42 0303 	orr.w	r3, r2, r3
  3e:	b29a      	uxth	r2, r3
  40:	683b      	ldr	r3, [r7, #0]
  42:	899b      	ldrh	r3, [r3, #12]
  44:	ea42 0303 	orr.w	r3, r2, r3
  48:	b29b      	uxth	r3, r3
  4a:	687a      	ldr	r2, [r7, #4]
  4c:	f8a2 3044 	strh.w	r3, [r2, #68]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:728
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
  50:	f107 070c 	add.w	r7, r7, #12	; 0xc
  54:	46bd      	mov	sp, r7
  56:	bc80      	pop	{r7}
  58:	4770      	bx	lr
  5a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_TimeBaseStructInit:

00000000 <TIM_TimeBaseStructInit>:
TIM_TimeBaseStructInit():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:737
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:739
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
   8:	687a      	ldr	r2, [r7, #4]
   a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   e:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:740
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
  10:	687a      	ldr	r2, [r7, #4]
  12:	f04f 0300 	mov.w	r3, #0	; 0x0
  16:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:741
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  18:	687a      	ldr	r2, [r7, #4]
  1a:	f04f 0300 	mov.w	r3, #0	; 0x0
  1e:	80d3      	strh	r3, [r2, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:742
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  20:	687a      	ldr	r2, [r7, #4]
  22:	f04f 0300 	mov.w	r3, #0	; 0x0
  26:	8053      	strh	r3, [r2, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:743
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
  28:	687a      	ldr	r2, [r7, #4]
  2a:	f04f 0300 	mov.w	r3, #0	; 0x0
  2e:	7213      	strb	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:744
}
  30:	f107 070c 	add.w	r7, r7, #12	; 0xc
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OCStructInit:

00000000 <TIM_OCStructInit>:
TIM_OCStructInit():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:753
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:755
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
   8:	687a      	ldr	r2, [r7, #4]
   a:	f04f 0300 	mov.w	r3, #0	; 0x0
   e:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:756
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
  10:	687a      	ldr	r2, [r7, #4]
  12:	f04f 0300 	mov.w	r3, #0	; 0x0
  16:	8053      	strh	r3, [r2, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:757
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
  18:	687a      	ldr	r2, [r7, #4]
  1a:	f04f 0300 	mov.w	r3, #0	; 0x0
  1e:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:758
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
  20:	687a      	ldr	r2, [r7, #4]
  22:	f04f 0300 	mov.w	r3, #0	; 0x0
  26:	80d3      	strh	r3, [r2, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:759
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
  28:	687a      	ldr	r2, [r7, #4]
  2a:	f04f 0300 	mov.w	r3, #0	; 0x0
  2e:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:760
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
  30:	687a      	ldr	r2, [r7, #4]
  32:	f04f 0300 	mov.w	r3, #0	; 0x0
  36:	8153      	strh	r3, [r2, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:761
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
  38:	687a      	ldr	r2, [r7, #4]
  3a:	f04f 0300 	mov.w	r3, #0	; 0x0
  3e:	8193      	strh	r3, [r2, #12]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:762
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
  40:	687a      	ldr	r2, [r7, #4]
  42:	f04f 0300 	mov.w	r3, #0	; 0x0
  46:	81d3      	strh	r3, [r2, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:763
}
  48:	f107 070c 	add.w	r7, r7, #12	; 0xc
  4c:	46bd      	mov	sp, r7
  4e:	bc80      	pop	{r7}
  50:	4770      	bx	lr
  52:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ICStructInit:

00000000 <TIM_ICStructInit>:
TIM_ICStructInit():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:772
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:774
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
   8:	687a      	ldr	r2, [r7, #4]
   a:	f04f 0300 	mov.w	r3, #0	; 0x0
   e:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:775
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  10:	687a      	ldr	r2, [r7, #4]
  12:	f04f 0300 	mov.w	r3, #0	; 0x0
  16:	8053      	strh	r3, [r2, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:776
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
  18:	687a      	ldr	r2, [r7, #4]
  1a:	f04f 0301 	mov.w	r3, #1	; 0x1
  1e:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:777
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
  20:	687a      	ldr	r2, [r7, #4]
  22:	f04f 0300 	mov.w	r3, #0	; 0x0
  26:	80d3      	strh	r3, [r2, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:778
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
  28:	687a      	ldr	r2, [r7, #4]
  2a:	f04f 0300 	mov.w	r3, #0	; 0x0
  2e:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:779
}
  30:	f107 070c 	add.w	r7, r7, #12	; 0xc
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_BDTRStructInit:

00000000 <TIM_BDTRStructInit>:
TIM_BDTRStructInit():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:788
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:790
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
   8:	687a      	ldr	r2, [r7, #4]
   a:	f04f 0300 	mov.w	r3, #0	; 0x0
   e:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:791
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
  10:	687a      	ldr	r2, [r7, #4]
  12:	f04f 0300 	mov.w	r3, #0	; 0x0
  16:	8053      	strh	r3, [r2, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:792
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
  18:	687a      	ldr	r2, [r7, #4]
  1a:	f04f 0300 	mov.w	r3, #0	; 0x0
  1e:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:793
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
  20:	687a      	ldr	r2, [r7, #4]
  22:	f04f 0300 	mov.w	r3, #0	; 0x0
  26:	80d3      	strh	r3, [r2, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:794
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
  28:	687a      	ldr	r2, [r7, #4]
  2a:	f04f 0300 	mov.w	r3, #0	; 0x0
  2e:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:795
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
  30:	687a      	ldr	r2, [r7, #4]
  32:	f04f 0300 	mov.w	r3, #0	; 0x0
  36:	8153      	strh	r3, [r2, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:796
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
  38:	687a      	ldr	r2, [r7, #4]
  3a:	f04f 0300 	mov.w	r3, #0	; 0x0
  3e:	8193      	strh	r3, [r2, #12]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:797
}
  40:	f107 070c 	add.w	r7, r7, #12	; 0xc
  44:	46bd      	mov	sp, r7
  46:	bc80      	pop	{r7}
  48:	4770      	bx	lr
  4a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_Cmd:

00000000 <TIM_Cmd>:
TIM_Cmd():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:807
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	72fb      	strb	r3, [r7, #11]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:812
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   c:	7afb      	ldrb	r3, [r7, #11]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_Cmd+0x24>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:815
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
  12:	68fb      	ldr	r3, [r7, #12]
  14:	881b      	ldrh	r3, [r3, #0]
  16:	b29b      	uxth	r3, r3
  18:	f043 0301 	orr.w	r3, r3, #1	; 0x1
  1c:	b29b      	uxth	r3, r3
  1e:	68fa      	ldr	r2, [r7, #12]
  20:	8013      	strh	r3, [r2, #0]
  22:	e00f      	b.n	44 <TIM_Cmd+0x44>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:820
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  24:	68fb      	ldr	r3, [r7, #12]
  26:	881b      	ldrh	r3, [r3, #0]
  28:	b29b      	uxth	r3, r3
  2a:	607b      	str	r3, [r7, #4]
  2c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  30:	f2c0 0300 	movt	r3, #0	; 0x0
  34:	6879      	ldr	r1, [r7, #4]
  36:	ea01 0303 	and.w	r3, r1, r3
  3a:	607b      	str	r3, [r7, #4]
  3c:	68fa      	ldr	r2, [r7, #12]
  3e:	6879      	ldr	r1, [r7, #4]
  40:	460b      	mov	r3, r1
  42:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:822
  }
}
  44:	f107 0714 	add.w	r7, r7, #20	; 0x14
  48:	46bd      	mov	sp, r7
  4a:	bc80      	pop	{r7}
  4c:	4770      	bx	lr
  4e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_CtrlPWMOutputs:

00000000 <TIM_CtrlPWMOutputs>:
TIM_CtrlPWMOutputs():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:832
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	72fb      	strb	r3, [r7, #11]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:836
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   c:	7afb      	ldrb	r3, [r7, #11]
   e:	2b00      	cmp	r3, #0
  10:	d00c      	beq.n	2c <TIM_CtrlPWMOutputs+0x2c>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:839
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
  12:	68fb      	ldr	r3, [r7, #12]
  14:	f8b3 3044 	ldrh.w	r3, [r3, #68]
  18:	b29b      	uxth	r3, r3
  1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
  1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
  22:	b29b      	uxth	r3, r3
  24:	68fa      	ldr	r2, [r7, #12]
  26:	f8a2 3044 	strh.w	r3, [r2, #68]
  2a:	e00f      	b.n	4c <TIM_CtrlPWMOutputs+0x4c>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:844
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]
  32:	b29b      	uxth	r3, r3
  34:	607b      	str	r3, [r7, #4]
  36:	6879      	ldr	r1, [r7, #4]
  38:	ea4f 4341 	mov.w	r3, r1, lsl #17
  3c:	ea4f 4353 	mov.w	r3, r3, lsr #17
  40:	607b      	str	r3, [r7, #4]
  42:	68fa      	ldr	r2, [r7, #12]
  44:	6879      	ldr	r1, [r7, #4]
  46:	460b      	mov	r3, r1
  48:	f8a2 3044 	strh.w	r3, [r2, #68]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:846
  }  
}
  4c:	f107 0714 	add.w	r7, r7, #20	; 0x14
  50:	46bd      	mov	sp, r7
  52:	bc80      	pop	{r7}
  54:	4770      	bx	lr
  56:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ITConfig:

00000000 <TIM_ITConfig>:
TIM_ITConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:873
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
   c:	4613      	mov	r3, r2
   e:	707b      	strb	r3, [r7, #1]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:879
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  10:	787b      	ldrb	r3, [r7, #1]
  12:	2b00      	cmp	r3, #0
  14:	d009      	beq.n	2a <TIM_ITConfig+0x2a>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:882
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
  16:	687b      	ldr	r3, [r7, #4]
  18:	899b      	ldrh	r3, [r3, #12]
  1a:	b29a      	uxth	r2, r3
  1c:	887b      	ldrh	r3, [r7, #2]
  1e:	ea42 0303 	orr.w	r3, r2, r3
  22:	b29b      	uxth	r3, r3
  24:	687a      	ldr	r2, [r7, #4]
  26:	8193      	strh	r3, [r2, #12]
  28:	e00b      	b.n	42 <TIM_ITConfig+0x42>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:887
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	899b      	ldrh	r3, [r3, #12]
  2e:	b29a      	uxth	r2, r3
  30:	887b      	ldrh	r3, [r7, #2]
  32:	ea6f 0303 	mvn.w	r3, r3
  36:	b29b      	uxth	r3, r3
  38:	ea02 0303 	and.w	r3, r2, r3
  3c:	b29b      	uxth	r3, r3
  3e:	687a      	ldr	r2, [r7, #4]
  40:	8193      	strh	r3, [r2, #12]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:889
  }
}
  42:	f107 070c 	add.w	r7, r7, #12	; 0xc
  46:	46bd      	mov	sp, r7
  48:	bc80      	pop	{r7}
  4a:	4770      	bx	lr
Disassembly of section .text.TIM_GenerateEvent:

00000000 <TIM_GenerateEvent>:
TIM_GenerateEvent():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:910
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:916
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
   c:	687a      	ldr	r2, [r7, #4]
   e:	887b      	ldrh	r3, [r7, #2]
  10:	8293      	strh	r3, [r2, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:917
}
  12:	f107 070c 	add.w	r7, r7, #12	; 0xc
  16:	46bd      	mov	sp, r7
  18:	bc80      	pop	{r7}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_DMAConfig:

00000000 <TIM_DMAConfig>:
TIM_DMAConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:938
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
   c:	4613      	mov	r3, r2
   e:	803b      	strh	r3, [r7, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:944
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
  10:	887a      	ldrh	r2, [r7, #2]
  12:	883b      	ldrh	r3, [r7, #0]
  14:	ea42 0303 	orr.w	r3, r2, r3
  18:	b29b      	uxth	r3, r3
  1a:	687a      	ldr	r2, [r7, #4]
  1c:	f8a2 3048 	strh.w	r3, [r2, #72]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:945
}
  20:	f107 070c 	add.w	r7, r7, #12	; 0xc
  24:	46bd      	mov	sp, r7
  26:	bc80      	pop	{r7}
  28:	4770      	bx	lr
  2a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_DMACmd:

00000000 <TIM_DMACmd>:
TIM_DMACmd():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:965
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
   c:	4613      	mov	r3, r2
   e:	707b      	strb	r3, [r7, #1]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:971
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  10:	787b      	ldrb	r3, [r7, #1]
  12:	2b00      	cmp	r3, #0
  14:	d009      	beq.n	2a <TIM_DMACmd+0x2a>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:974
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
  16:	687b      	ldr	r3, [r7, #4]
  18:	899b      	ldrh	r3, [r3, #12]
  1a:	b29a      	uxth	r2, r3
  1c:	887b      	ldrh	r3, [r7, #2]
  1e:	ea42 0303 	orr.w	r3, r2, r3
  22:	b29b      	uxth	r3, r3
  24:	687a      	ldr	r2, [r7, #4]
  26:	8193      	strh	r3, [r2, #12]
  28:	e00b      	b.n	42 <TIM_DMACmd+0x42>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:979
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	899b      	ldrh	r3, [r3, #12]
  2e:	b29a      	uxth	r2, r3
  30:	887b      	ldrh	r3, [r7, #2]
  32:	ea6f 0303 	mvn.w	r3, r3
  36:	b29b      	uxth	r3, r3
  38:	ea02 0303 	and.w	r3, r2, r3
  3c:	b29b      	uxth	r3, r3
  3e:	687a      	ldr	r2, [r7, #4]
  40:	8193      	strh	r3, [r2, #12]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:981
  }
}
  42:	f107 070c 	add.w	r7, r7, #12	; 0xc
  46:	46bd      	mov	sp, r7
  48:	bc80      	pop	{r7}
  4a:	4770      	bx	lr
Disassembly of section .text.TIM_InternalClockConfig:

00000000 <TIM_InternalClockConfig>:
TIM_InternalClockConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:990
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:994
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
   8:	687b      	ldr	r3, [r7, #4]
   a:	891b      	ldrh	r3, [r3, #8]
   c:	b29b      	uxth	r3, r3
   e:	603b      	str	r3, [r7, #0]
  10:	f64f 73f8 	movw	r3, #65528	; 0xfff8
  14:	f2c0 0300 	movt	r3, #0	; 0x0
  18:	6839      	ldr	r1, [r7, #0]
  1a:	ea01 0303 	and.w	r3, r1, r3
  1e:	603b      	str	r3, [r7, #0]
  20:	687a      	ldr	r2, [r7, #4]
  22:	6839      	ldr	r1, [r7, #0]
  24:	460b      	mov	r3, r1
  26:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:995
}
  28:	f107 070c 	add.w	r7, r7, #12	; 0xc
  2c:	46bd      	mov	sp, r7
  2e:	bc80      	pop	{r7}
  30:	4770      	bx	lr
  32:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ITRxExternalClockConfig:

00000000 <TIM_ITRxExternalClockConfig>:
TIM_ITRxExternalClockConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1009
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1014
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
   c:	887b      	ldrh	r3, [r7, #2]
   e:	6878      	ldr	r0, [r7, #4]
  10:	4619      	mov	r1, r3
  12:	f7ff fffe 	bl	0 <TIM_ITRxExternalClockConfig>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1016
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
  16:	687b      	ldr	r3, [r7, #4]
  18:	891b      	ldrh	r3, [r3, #8]
  1a:	b29b      	uxth	r3, r3
  1c:	f043 0307 	orr.w	r3, r3, #7	; 0x7
  20:	b29b      	uxth	r3, r3
  22:	687a      	ldr	r2, [r7, #4]
  24:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1017
}
  26:	f107 0708 	add.w	r7, r7, #8	; 0x8
  2a:	46bd      	mov	sp, r7
  2c:	bd80      	pop	{r7, pc}
  2e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_TIxExternalClockConfig:

00000000 <TIM_TIxExternalClockConfig>:
TIM_TIxExternalClockConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1037
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
   0:	b590      	push	{r4, r7, lr}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	4618      	mov	r0, r3
   a:	460b      	mov	r3, r1
   c:	817b      	strh	r3, [r7, #10]
   e:	4613      	mov	r3, r2
  10:	813b      	strh	r3, [r7, #8]
  12:	4603      	mov	r3, r0
  14:	80fb      	strh	r3, [r7, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1044
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  16:	897b      	ldrh	r3, [r7, #10]
  18:	2b60      	cmp	r3, #96
  1a:	d109      	bne.n	30 <TIM_TIxExternalClockConfig+0x30>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1046
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  1c:	893b      	ldrh	r3, [r7, #8]
  1e:	88fc      	ldrh	r4, [r7, #6]
  20:	68f8      	ldr	r0, [r7, #12]
  22:	4619      	mov	r1, r3
  24:	f04f 0201 	mov.w	r2, #1	; 0x1
  28:	4623      	mov	r3, r4
  2a:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
  2e:	e008      	b.n	42 <TIM_TIxExternalClockConfig+0x42>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1050
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  30:	893b      	ldrh	r3, [r7, #8]
  32:	88fc      	ldrh	r4, [r7, #6]
  34:	68f8      	ldr	r0, [r7, #12]
  36:	4619      	mov	r1, r3
  38:	f04f 0201 	mov.w	r2, #1	; 0x1
  3c:	4623      	mov	r3, r4
  3e:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1053
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  42:	897b      	ldrh	r3, [r7, #10]
  44:	68f8      	ldr	r0, [r7, #12]
  46:	4619      	mov	r1, r3
  48:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1055
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
  4c:	68fb      	ldr	r3, [r7, #12]
  4e:	891b      	ldrh	r3, [r3, #8]
  50:	b29b      	uxth	r3, r3
  52:	f043 0307 	orr.w	r3, r3, #7	; 0x7
  56:	b29b      	uxth	r3, r3
  58:	68fa      	ldr	r2, [r7, #12]
  5a:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1056
}
  5c:	f107 0714 	add.w	r7, r7, #20	; 0x14
  60:	46bd      	mov	sp, r7
  62:	bd90      	pop	{r4, r7, pc}
Disassembly of section .text.TIM_ETRClockMode1Config:

00000000 <TIM_ETRClockMode1Config>:
TIM_ETRClockMode1Config():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1077
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
   0:	b590      	push	{r4, r7, lr}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	4618      	mov	r0, r3
   a:	460b      	mov	r3, r1
   c:	817b      	strh	r3, [r7, #10]
   e:	4613      	mov	r3, r2
  10:	813b      	strh	r3, [r7, #8]
  12:	4603      	mov	r3, r0
  14:	80fb      	strh	r3, [r7, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1078
  uint16_t tmpsmcr = 0;
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1085
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  1c:	897b      	ldrh	r3, [r7, #10]
  1e:	893a      	ldrh	r2, [r7, #8]
  20:	88fc      	ldrh	r4, [r7, #6]
  22:	68f8      	ldr	r0, [r7, #12]
  24:	4619      	mov	r1, r3
  26:	4623      	mov	r3, r4
  28:	f7ff fffe 	bl	0 <TIM_ETRClockMode1Config>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1088
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	891b      	ldrh	r3, [r3, #8]
  30:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1090
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  32:	8afb      	ldrh	r3, [r7, #22]
  34:	f023 0307 	bic.w	r3, r3, #7	; 0x7
  38:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1092
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  3a:	8afb      	ldrh	r3, [r7, #22]
  3c:	f043 0307 	orr.w	r3, r3, #7	; 0x7
  40:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1094
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
  42:	8afb      	ldrh	r3, [r7, #22]
  44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  48:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1095
  tmpsmcr |= TIM_TS_ETRF;
  4a:	8afb      	ldrh	r3, [r7, #22]
  4c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  50:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1097
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  52:	68fa      	ldr	r2, [r7, #12]
  54:	8afb      	ldrh	r3, [r7, #22]
  56:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1098
}
  58:	f107 071c 	add.w	r7, r7, #28	; 0x1c
  5c:	46bd      	mov	sp, r7
  5e:	bd90      	pop	{r4, r7, pc}
Disassembly of section .text.TIM_ETRClockMode2Config:

00000000 <TIM_ETRClockMode2Config>:
TIM_ETRClockMode2Config():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1119
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
   0:	b590      	push	{r4, r7, lr}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	4618      	mov	r0, r3
   a:	460b      	mov	r3, r1
   c:	817b      	strh	r3, [r7, #10]
   e:	4613      	mov	r3, r2
  10:	813b      	strh	r3, [r7, #8]
  12:	4603      	mov	r3, r0
  14:	80fb      	strh	r3, [r7, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1126
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  16:	897b      	ldrh	r3, [r7, #10]
  18:	893a      	ldrh	r2, [r7, #8]
  1a:	88fc      	ldrh	r4, [r7, #6]
  1c:	68f8      	ldr	r0, [r7, #12]
  1e:	4619      	mov	r1, r3
  20:	4623      	mov	r3, r4
  22:	f7ff fffe 	bl	0 <TIM_ETRClockMode2Config>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1128
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
  26:	68fb      	ldr	r3, [r7, #12]
  28:	891b      	ldrh	r3, [r3, #8]
  2a:	b29b      	uxth	r3, r3
  2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  30:	b29b      	uxth	r3, r3
  32:	68fa      	ldr	r2, [r7, #12]
  34:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1129
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bd90      	pop	{r4, r7, pc}
  3e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ETRConfig:

00000000 <TIM_ETRConfig>:
TIM_ETRConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1150
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	4618      	mov	r0, r3
   a:	460b      	mov	r3, r1
   c:	817b      	strh	r3, [r7, #10]
   e:	4613      	mov	r3, r2
  10:	813b      	strh	r3, [r7, #8]
  12:	4603      	mov	r3, r0
  14:	80fb      	strh	r3, [r7, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1151
  uint16_t tmpsmcr = 0;
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1157
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
  1c:	68fb      	ldr	r3, [r7, #12]
  1e:	891b      	ldrh	r3, [r3, #8]
  20:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1159
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
  22:	8afb      	ldrh	r3, [r7, #22]
  24:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  28:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1161
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
  2a:	88fb      	ldrh	r3, [r7, #6]
  2c:	ea4f 2303 	mov.w	r3, r3, lsl #8
  30:	b29a      	uxth	r2, r3
  32:	893b      	ldrh	r3, [r7, #8]
  34:	ea42 0303 	orr.w	r3, r2, r3
  38:	b29a      	uxth	r2, r3
  3a:	897b      	ldrh	r3, [r7, #10]
  3c:	ea42 0303 	orr.w	r3, r2, r3
  40:	b29a      	uxth	r2, r3
  42:	8afb      	ldrh	r3, [r7, #22]
  44:	ea42 0303 	orr.w	r3, r2, r3
  48:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1163
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  4a:	68fa      	ldr	r2, [r7, #12]
  4c:	8afb      	ldrh	r3, [r7, #22]
  4e:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1164
}
  50:	f107 071c 	add.w	r7, r7, #28	; 0x1c
  54:	46bd      	mov	sp, r7
  56:	bc80      	pop	{r7}
  58:	4770      	bx	lr
  5a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_PrescalerConfig:

00000000 <TIM_PrescalerConfig>:
TIM_PrescalerConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1177
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
   c:	4613      	mov	r3, r2
   e:	803b      	strh	r3, [r7, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1182
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
  10:	687a      	ldr	r2, [r7, #4]
  12:	887b      	ldrh	r3, [r7, #2]
  14:	8513      	strh	r3, [r2, #40]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1184
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
  16:	687a      	ldr	r2, [r7, #4]
  18:	883b      	ldrh	r3, [r7, #0]
  1a:	8293      	strh	r3, [r2, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1185
}
  1c:	f107 070c 	add.w	r7, r7, #12	; 0xc
  20:	46bd      	mov	sp, r7
  22:	bc80      	pop	{r7}
  24:	4770      	bx	lr
  26:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_CounterModeConfig:

00000000 <TIM_CounterModeConfig>:
TIM_CounterModeConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1200
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1201
  uint16_t tmpcr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1205
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	881b      	ldrh	r3, [r3, #0]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1207
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1209
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1211
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1212
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectInputTrigger:

00000000 <TIM_SelectInputTrigger>:
TIM_SelectInputTrigger():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1230
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1231
  uint16_t tmpsmcr = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1236
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  12:	687b      	ldr	r3, [r7, #4]
  14:	891b      	ldrh	r3, [r3, #8]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1238
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1240
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1242
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1243
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_EncoderInterfaceConfig:

00000000 <TIM_EncoderInterfaceConfig>:
TIM_EncoderInterfaceConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1266
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	4618      	mov	r0, r3
   a:	460b      	mov	r3, r1
   c:	817b      	strh	r3, [r7, #10]
   e:	4613      	mov	r3, r2
  10:	813b      	strh	r3, [r7, #8]
  12:	4603      	mov	r3, r0
  14:	80fb      	strh	r3, [r7, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1267
  uint16_t tmpsmcr = 0;
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1268
  uint16_t tmpccmr1 = 0;
  1c:	f04f 0300 	mov.w	r3, #0	; 0x0
  20:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1269
  uint16_t tmpccer = 0;
  22:	f04f 0300 	mov.w	r3, #0	; 0x0
  26:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1278
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  28:	68fb      	ldr	r3, [r7, #12]
  2a:	891b      	ldrh	r3, [r3, #8]
  2c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1281
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  2e:	68fb      	ldr	r3, [r7, #12]
  30:	8b1b      	ldrh	r3, [r3, #24]
  32:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1284
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  34:	68fb      	ldr	r3, [r7, #12]
  36:	8c1b      	ldrh	r3, [r3, #32]
  38:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1287
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  3a:	8a7b      	ldrh	r3, [r7, #18]
  3c:	f023 0307 	bic.w	r3, r3, #7	; 0x7
  40:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1288
  tmpsmcr |= TIM_EncoderMode;
  42:	8a7a      	ldrh	r2, [r7, #18]
  44:	897b      	ldrh	r3, [r7, #10]
  46:	ea42 0303 	orr.w	r3, r2, r3
  4a:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1291
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  4c:	8abb      	ldrh	r3, [r7, #20]
  4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  52:	f023 0303 	bic.w	r3, r3, #3	; 0x3
  56:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1292
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
  58:	8abb      	ldrh	r3, [r7, #20]
  5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  5e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
  62:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1295
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
  64:	8afb      	ldrh	r3, [r7, #22]
  66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
  6a:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1296
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
  6c:	88fb      	ldrh	r3, [r7, #6]
  6e:	ea4f 1303 	mov.w	r3, r3, lsl #4
  72:	b29a      	uxth	r2, r3
  74:	893b      	ldrh	r3, [r7, #8]
  76:	ea42 0303 	orr.w	r3, r2, r3
  7a:	b29a      	uxth	r2, r3
  7c:	8afb      	ldrh	r3, [r7, #22]
  7e:	ea42 0303 	orr.w	r3, r2, r3
  82:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1299
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  84:	68fa      	ldr	r2, [r7, #12]
  86:	8a7b      	ldrh	r3, [r7, #18]
  88:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1301
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  8a:	68fa      	ldr	r2, [r7, #12]
  8c:	8abb      	ldrh	r3, [r7, #20]
  8e:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1303
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  90:	68fa      	ldr	r2, [r7, #12]
  92:	8afb      	ldrh	r3, [r7, #22]
  94:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1304
}
  96:	f107 071c 	add.w	r7, r7, #28	; 0x1c
  9a:	46bd      	mov	sp, r7
  9c:	bc80      	pop	{r7}
  9e:	4770      	bx	lr
Disassembly of section .text.TIM_ForcedOC1Config:

00000000 <TIM_ForcedOC1Config>:
TIM_ForcedOC1Config():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1316
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1317
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1321
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1323
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1325
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1327
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1328
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ForcedOC2Config:

00000000 <TIM_ForcedOC2Config>:
TIM_ForcedOC2Config():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1340
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1341
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1345
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1347
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1349
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1351
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  30:	687a      	ldr	r2, [r7, #4]
  32:	89fb      	ldrh	r3, [r7, #14]
  34:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1352
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_ForcedOC3Config:

00000000 <TIM_ForcedOC3Config>:
TIM_ForcedOC3Config():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1364
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1365
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1369
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1371
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1373
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1375
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1376
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ForcedOC4Config:

00000000 <TIM_ForcedOC4Config>:
TIM_ForcedOC4Config():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1388
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1389
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1393
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1395
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1397
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1399
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  30:	687a      	ldr	r2, [r7, #4]
  32:	89fb      	ldrh	r3, [r7, #14]
  34:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1400
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_ARRPreloadConfig:

00000000 <TIM_ARRPreloadConfig>:
TIM_ARRPreloadConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1410
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	72fb      	strb	r3, [r7, #11]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1414
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   c:	7afb      	ldrb	r3, [r7, #11]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_ARRPreloadConfig+0x24>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1417
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
  12:	68fb      	ldr	r3, [r7, #12]
  14:	881b      	ldrh	r3, [r3, #0]
  16:	b29b      	uxth	r3, r3
  18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  1c:	b29b      	uxth	r3, r3
  1e:	68fa      	ldr	r2, [r7, #12]
  20:	8013      	strh	r3, [r2, #0]
  22:	e00f      	b.n	44 <TIM_ARRPreloadConfig+0x44>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1422
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  24:	68fb      	ldr	r3, [r7, #12]
  26:	881b      	ldrh	r3, [r3, #0]
  28:	b29b      	uxth	r3, r3
  2a:	607b      	str	r3, [r7, #4]
  2c:	f64f 737f 	movw	r3, #65407	; 0xff7f
  30:	f2c0 0300 	movt	r3, #0	; 0x0
  34:	6879      	ldr	r1, [r7, #4]
  36:	ea01 0303 	and.w	r3, r1, r3
  3a:	607b      	str	r3, [r7, #4]
  3c:	68fa      	ldr	r2, [r7, #12]
  3e:	6879      	ldr	r1, [r7, #4]
  40:	460b      	mov	r3, r1
  42:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1424
  }
}
  44:	f107 0714 	add.w	r7, r7, #20	; 0x14
  48:	46bd      	mov	sp, r7
  4a:	bc80      	pop	{r7}
  4c:	4770      	bx	lr
  4e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectCOM:

00000000 <TIM_SelectCOM>:
TIM_SelectCOM():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1434
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	72fb      	strb	r3, [r7, #11]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1438
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   c:	7afb      	ldrb	r3, [r7, #11]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_SelectCOM+0x24>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1441
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
  12:	68fb      	ldr	r3, [r7, #12]
  14:	889b      	ldrh	r3, [r3, #4]
  16:	b29b      	uxth	r3, r3
  18:	f043 0304 	orr.w	r3, r3, #4	; 0x4
  1c:	b29b      	uxth	r3, r3
  1e:	68fa      	ldr	r2, [r7, #12]
  20:	8093      	strh	r3, [r2, #4]
  22:	e00f      	b.n	44 <TIM_SelectCOM+0x44>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1446
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
  24:	68fb      	ldr	r3, [r7, #12]
  26:	889b      	ldrh	r3, [r3, #4]
  28:	b29b      	uxth	r3, r3
  2a:	607b      	str	r3, [r7, #4]
  2c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
  30:	f2c0 0300 	movt	r3, #0	; 0x0
  34:	6879      	ldr	r1, [r7, #4]
  36:	ea01 0303 	and.w	r3, r1, r3
  3a:	607b      	str	r3, [r7, #4]
  3c:	68fa      	ldr	r2, [r7, #12]
  3e:	6879      	ldr	r1, [r7, #4]
  40:	460b      	mov	r3, r1
  42:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1448
  }
}
  44:	f107 0714 	add.w	r7, r7, #20	; 0x14
  48:	46bd      	mov	sp, r7
  4a:	bc80      	pop	{r7}
  4c:	4770      	bx	lr
  4e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectCCDMA:

00000000 <TIM_SelectCCDMA>:
TIM_SelectCCDMA():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1459
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	72fb      	strb	r3, [r7, #11]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1463
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   c:	7afb      	ldrb	r3, [r7, #11]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_SelectCCDMA+0x24>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1466
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
  12:	68fb      	ldr	r3, [r7, #12]
  14:	889b      	ldrh	r3, [r3, #4]
  16:	b29b      	uxth	r3, r3
  18:	f043 0308 	orr.w	r3, r3, #8	; 0x8
  1c:	b29b      	uxth	r3, r3
  1e:	68fa      	ldr	r2, [r7, #12]
  20:	8093      	strh	r3, [r2, #4]
  22:	e00f      	b.n	44 <TIM_SelectCCDMA+0x44>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1471
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
  24:	68fb      	ldr	r3, [r7, #12]
  26:	889b      	ldrh	r3, [r3, #4]
  28:	b29b      	uxth	r3, r3
  2a:	607b      	str	r3, [r7, #4]
  2c:	f64f 73f7 	movw	r3, #65527	; 0xfff7
  30:	f2c0 0300 	movt	r3, #0	; 0x0
  34:	6879      	ldr	r1, [r7, #4]
  36:	ea01 0303 	and.w	r3, r1, r3
  3a:	607b      	str	r3, [r7, #4]
  3c:	68fa      	ldr	r2, [r7, #12]
  3e:	6879      	ldr	r1, [r7, #4]
  40:	460b      	mov	r3, r1
  42:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1473
  }
}
  44:	f107 0714 	add.w	r7, r7, #20	; 0x14
  48:	46bd      	mov	sp, r7
  4a:	bc80      	pop	{r7}
  4c:	4770      	bx	lr
  4e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_CCPreloadControl:

00000000 <TIM_CCPreloadControl>:
TIM_CCPreloadControl():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1484
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	72fb      	strb	r3, [r7, #11]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1488
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   c:	7afb      	ldrb	r3, [r7, #11]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_CCPreloadControl+0x24>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1491
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
  12:	68fb      	ldr	r3, [r7, #12]
  14:	889b      	ldrh	r3, [r3, #4]
  16:	b29b      	uxth	r3, r3
  18:	f043 0301 	orr.w	r3, r3, #1	; 0x1
  1c:	b29b      	uxth	r3, r3
  1e:	68fa      	ldr	r2, [r7, #12]
  20:	8093      	strh	r3, [r2, #4]
  22:	e00f      	b.n	44 <TIM_CCPreloadControl+0x44>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1496
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
  24:	68fb      	ldr	r3, [r7, #12]
  26:	889b      	ldrh	r3, [r3, #4]
  28:	b29b      	uxth	r3, r3
  2a:	607b      	str	r3, [r7, #4]
  2c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  30:	f2c0 0300 	movt	r3, #0	; 0x0
  34:	6879      	ldr	r1, [r7, #4]
  36:	ea01 0303 	and.w	r3, r1, r3
  3a:	607b      	str	r3, [r7, #4]
  3c:	68fa      	ldr	r2, [r7, #12]
  3e:	6879      	ldr	r1, [r7, #4]
  40:	460b      	mov	r3, r1
  42:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1498
  }
}
  44:	f107 0714 	add.w	r7, r7, #20	; 0x14
  48:	46bd      	mov	sp, r7
  4a:	bc80      	pop	{r7}
  4c:	4770      	bx	lr
  4e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC1PreloadConfig:

00000000 <TIM_OC1PreloadConfig>:
TIM_OC1PreloadConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1510
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1511
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1515
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1517
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1519
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1521
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1522
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC2PreloadConfig:

00000000 <TIM_OC2PreloadConfig>:
TIM_OC2PreloadConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1535
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1536
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1540
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1542
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1544
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1546
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  30:	687a      	ldr	r2, [r7, #4]
  32:	89fb      	ldrh	r3, [r7, #14]
  34:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1547
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_OC3PreloadConfig:

00000000 <TIM_OC3PreloadConfig>:
TIM_OC3PreloadConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1559
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1560
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1564
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1566
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1568
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1570
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1571
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC4PreloadConfig:

00000000 <TIM_OC4PreloadConfig>:
TIM_OC4PreloadConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1583
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1584
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1588
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1590
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1592
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1594
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  30:	687a      	ldr	r2, [r7, #4]
  32:	89fb      	ldrh	r3, [r7, #14]
  34:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1595
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_OC1FastConfig:

00000000 <TIM_OC1FastConfig>:
TIM_OC1FastConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1607
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1608
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1613
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1615
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0304 	bic.w	r3, r3, #4	; 0x4
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1617
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1619
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1620
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC2FastConfig:

00000000 <TIM_OC2FastConfig>:
TIM_OC2FastConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1633
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1634
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1639
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1641
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1643
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1645
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  30:	687a      	ldr	r2, [r7, #4]
  32:	89fb      	ldrh	r3, [r7, #14]
  34:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1646
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_OC3FastConfig:

00000000 <TIM_OC3FastConfig>:
TIM_OC3FastConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1658
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1659
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1664
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1666
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0304 	bic.w	r3, r3, #4	; 0x4
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1668
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1670
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1671
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC4FastConfig:

00000000 <TIM_OC4FastConfig>:
TIM_OC4FastConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1683
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1684
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1689
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1691
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1693
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1695
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
  30:	687a      	ldr	r2, [r7, #4]
  32:	89fb      	ldrh	r3, [r7, #14]
  34:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1696
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_ClearOC1Ref:

00000000 <TIM_ClearOC1Ref>:
TIM_ClearOC1Ref():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1708
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1709
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1714
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1717

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1719
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1721
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1722
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ClearOC2Ref:

00000000 <TIM_ClearOC2Ref>:
TIM_ClearOC2Ref():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1734
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1735
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1739
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1741
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	ea4f 4343 	mov.w	r3, r3, lsl #17
  1e:	ea4f 4353 	mov.w	r3, r3, lsr #17
  22:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1743
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
  24:	887b      	ldrh	r3, [r7, #2]
  26:	ea4f 2303 	mov.w	r3, r3, lsl #8
  2a:	b29a      	uxth	r2, r3
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	ea42 0303 	orr.w	r3, r2, r3
  32:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1745
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  34:	687a      	ldr	r2, [r7, #4]
  36:	89fb      	ldrh	r3, [r7, #14]
  38:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1746
}
  3a:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3e:	46bd      	mov	sp, r7
  40:	bc80      	pop	{r7}
  42:	4770      	bx	lr
Disassembly of section .text.TIM_ClearOC3Ref:

00000000 <TIM_ClearOC3Ref>:
TIM_ClearOC3Ref():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1758
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1759
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1763
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1765
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1767
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1769
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1770
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ClearOC4Ref:

00000000 <TIM_ClearOC4Ref>:
TIM_ClearOC4Ref():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1782
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1783
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1787
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1789
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	ea4f 4343 	mov.w	r3, r3, lsl #17
  1e:	ea4f 4353 	mov.w	r3, r3, lsr #17
  22:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1791
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
  24:	887b      	ldrh	r3, [r7, #2]
  26:	ea4f 2303 	mov.w	r3, r3, lsl #8
  2a:	b29a      	uxth	r2, r3
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	ea42 0303 	orr.w	r3, r2, r3
  32:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1793
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  34:	687a      	ldr	r2, [r7, #4]
  36:	89fb      	ldrh	r3, [r7, #14]
  38:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1794
}
  3a:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3e:	46bd      	mov	sp, r7
  40:	bc80      	pop	{r7}
  42:	4770      	bx	lr
Disassembly of section .text.TIM_OC1PolarityConfig:

00000000 <TIM_OC1PolarityConfig>:
TIM_OC1PolarityConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1806
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1807
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1811
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1813
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0302 	bic.w	r3, r3, #2	; 0x2
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1814
  tmpccer |= TIM_OCPolarity;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1816
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1817
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC1NPolarityConfig:

00000000 <TIM_OC1NPolarityConfig>:
TIM_OC1NPolarityConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1829
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1830
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1835
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1837
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1838
  tmpccer |= TIM_OCNPolarity;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1840
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  2a:	687a      	ldr	r2, [r7, #4]
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1841
}
  30:	f107 0714 	add.w	r7, r7, #20	; 0x14
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_OC2PolarityConfig:

00000000 <TIM_OC2PolarityConfig>:
TIM_OC2PolarityConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1853
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1854
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1858
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1860
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0320 	bic.w	r3, r3, #32	; 0x20
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1861
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 1303 	mov.w	r3, r3, lsl #4
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1863
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  30:	687a      	ldr	r2, [r7, #4]
  32:	89fb      	ldrh	r3, [r7, #14]
  34:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1864
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_OC2NPolarityConfig:

00000000 <TIM_OC2NPolarityConfig>:
TIM_OC2NPolarityConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1876
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1877
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1882
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1884
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1885
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 1303 	mov.w	r3, r3, lsl #4
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1887
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  30:	687a      	ldr	r2, [r7, #4]
  32:	89fb      	ldrh	r3, [r7, #14]
  34:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1888
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_OC3PolarityConfig:

00000000 <TIM_OC3PolarityConfig>:
TIM_OC3PolarityConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1900
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1901
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1905
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1907
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1908
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1910
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  30:	687a      	ldr	r2, [r7, #4]
  32:	89fb      	ldrh	r3, [r7, #14]
  34:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1911
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_OC3NPolarityConfig:

00000000 <TIM_OC3NPolarityConfig>:
TIM_OC3NPolarityConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1923
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1924
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1930
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1932
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1933
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1935
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  30:	687a      	ldr	r2, [r7, #4]
  32:	89fb      	ldrh	r3, [r7, #14]
  34:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1936
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_OC4PolarityConfig:

00000000 <TIM_OC4PolarityConfig>:
TIM_OC4PolarityConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1948
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1949
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1953
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1955
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  1e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1956
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 3303 	mov.w	r3, r3, lsl #12
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1958
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  30:	687a      	ldr	r2, [r7, #4]
  32:	89fb      	ldrh	r3, [r7, #14]
  34:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1959
}
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_CCxCmd:

00000000 <TIM_CCxCmd>:
TIM_CCxCmd():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1975
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
   c:	4613      	mov	r3, r2
   e:	803b      	strh	r3, [r7, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1976
  uint16_t tmp = 0;
  10:	f04f 0300 	mov.w	r3, #0	; 0x0
  14:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1983
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
  16:	887a      	ldrh	r2, [r7, #2]
  18:	f04f 0301 	mov.w	r3, #1	; 0x1
  1c:	fa03 f302 	lsl.w	r3, r3, r2
  20:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1986

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
  22:	687b      	ldr	r3, [r7, #4]
  24:	8c1b      	ldrh	r3, [r3, #32]
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea6f 0303 	mvn.w	r3, r3
  2e:	b29b      	uxth	r3, r3
  30:	ea02 0303 	and.w	r3, r2, r3
  34:	b29b      	uxth	r3, r3
  36:	687a      	ldr	r2, [r7, #4]
  38:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1989

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
  3a:	687b      	ldr	r3, [r7, #4]
  3c:	8c1b      	ldrh	r3, [r3, #32]
  3e:	b299      	uxth	r1, r3
  40:	883a      	ldrh	r2, [r7, #0]
  42:	887b      	ldrh	r3, [r7, #2]
  44:	fa02 f303 	lsl.w	r3, r2, r3
  48:	b29b      	uxth	r3, r3
  4a:	ea41 0303 	orr.w	r3, r1, r3
  4e:	b29b      	uxth	r3, r3
  50:	687a      	ldr	r2, [r7, #4]
  52:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1990
}
  54:	f107 0714 	add.w	r7, r7, #20	; 0x14
  58:	46bd      	mov	sp, r7
  5a:	bc80      	pop	{r7}
  5c:	4770      	bx	lr
  5e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_CCxNCmd:

00000000 <TIM_CCxNCmd>:
TIM_CCxNCmd():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2005
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
   c:	4613      	mov	r3, r2
   e:	803b      	strh	r3, [r7, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2006
  uint16_t tmp = 0;
  10:	f04f 0300 	mov.w	r3, #0	; 0x0
  14:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2013
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
  16:	887a      	ldrh	r2, [r7, #2]
  18:	f04f 0304 	mov.w	r3, #4	; 0x4
  1c:	fa03 f302 	lsl.w	r3, r3, r2
  20:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2016

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
  22:	687b      	ldr	r3, [r7, #4]
  24:	8c1b      	ldrh	r3, [r3, #32]
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea6f 0303 	mvn.w	r3, r3
  2e:	b29b      	uxth	r3, r3
  30:	ea02 0303 	and.w	r3, r2, r3
  34:	b29b      	uxth	r3, r3
  36:	687a      	ldr	r2, [r7, #4]
  38:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2019

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
  3a:	687b      	ldr	r3, [r7, #4]
  3c:	8c1b      	ldrh	r3, [r3, #32]
  3e:	b299      	uxth	r1, r3
  40:	883a      	ldrh	r2, [r7, #0]
  42:	887b      	ldrh	r3, [r7, #2]
  44:	fa02 f303 	lsl.w	r3, r2, r3
  48:	b29b      	uxth	r3, r3
  4a:	ea41 0303 	orr.w	r3, r1, r3
  4e:	b29b      	uxth	r3, r3
  50:	687a      	ldr	r2, [r7, #4]
  52:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2020
}
  54:	f107 0714 	add.w	r7, r7, #20	; 0x14
  58:	46bd      	mov	sp, r7
  5a:	bc80      	pop	{r7}
  5c:	4770      	bx	lr
  5e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectOCxM:

00000000 <TIM_SelectOCxM>:
TIM_SelectOCxM():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2046
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
   c:	4613      	mov	r3, r2
   e:	803b      	strh	r3, [r7, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2047
  uint32_t tmp = 0;
  10:	f04f 0300 	mov.w	r3, #0	; 0x0
  14:	60bb      	str	r3, [r7, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2048
  uint16_t tmp1 = 0;
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2055
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	60bb      	str	r3, [r7, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2056
  tmp += CCMR_Offset;
  20:	68bb      	ldr	r3, [r7, #8]
  22:	f103 0318 	add.w	r3, r3, #24	; 0x18
  26:	60bb      	str	r3, [r7, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2058

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
  28:	887a      	ldrh	r2, [r7, #2]
  2a:	f04f 0301 	mov.w	r3, #1	; 0x1
  2e:	fa03 f302 	lsl.w	r3, r3, r2
  32:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2061

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
  34:	687b      	ldr	r3, [r7, #4]
  36:	8c1b      	ldrh	r3, [r3, #32]
  38:	b29a      	uxth	r2, r3
  3a:	89fb      	ldrh	r3, [r7, #14]
  3c:	ea6f 0303 	mvn.w	r3, r3
  40:	b29b      	uxth	r3, r3
  42:	ea02 0303 	and.w	r3, r2, r3
  46:	b29b      	uxth	r3, r3
  48:	687a      	ldr	r2, [r7, #4]
  4a:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2063

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  4c:	887b      	ldrh	r3, [r7, #2]
  4e:	2b00      	cmp	r3, #0
  50:	d002      	beq.n	58 <TIM_SelectOCxM+0x58>
  52:	887b      	ldrh	r3, [r7, #2]
  54:	2b08      	cmp	r3, #8
  56:	d115      	bne.n	84 <TIM_SelectOCxM+0x84>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2065
  {
    tmp += (TIM_Channel>>1);
  58:	887b      	ldrh	r3, [r7, #2]
  5a:	ea4f 0353 	mov.w	r3, r3, lsr #1
  5e:	b29b      	uxth	r3, r3
  60:	461a      	mov	r2, r3
  62:	68bb      	ldr	r3, [r7, #8]
  64:	4413      	add	r3, r2
  66:	60bb      	str	r3, [r7, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2068

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
  68:	68ba      	ldr	r2, [r7, #8]
  6a:	68bb      	ldr	r3, [r7, #8]
  6c:	681b      	ldr	r3, [r3, #0]
  6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  72:	6013      	str	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2071
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  74:	68b9      	ldr	r1, [r7, #8]
  76:	68bb      	ldr	r3, [r7, #8]
  78:	681a      	ldr	r2, [r3, #0]
  7a:	883b      	ldrh	r3, [r7, #0]
  7c:	ea42 0303 	orr.w	r3, r2, r3
  80:	600b      	str	r3, [r1, #0]
  82:	e01a      	b.n	ba <TIM_SelectOCxM+0xba>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2075
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
  84:	887b      	ldrh	r3, [r7, #2]
  86:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
  8a:	b29b      	uxth	r3, r3
  8c:	ea4f 0353 	mov.w	r3, r3, lsr #1
  90:	b29b      	uxth	r3, r3
  92:	461a      	mov	r2, r3
  94:	68bb      	ldr	r3, [r7, #8]
  96:	4413      	add	r3, r2
  98:	60bb      	str	r3, [r7, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2078

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
  9a:	68ba      	ldr	r2, [r7, #8]
  9c:	68bb      	ldr	r3, [r7, #8]
  9e:	681b      	ldr	r3, [r3, #0]
  a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  a4:	6013      	str	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2081
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
  a6:	68b9      	ldr	r1, [r7, #8]
  a8:	68bb      	ldr	r3, [r7, #8]
  aa:	681a      	ldr	r2, [r3, #0]
  ac:	883b      	ldrh	r3, [r7, #0]
  ae:	ea4f 2303 	mov.w	r3, r3, lsl #8
  b2:	b29b      	uxth	r3, r3
  b4:	ea42 0303 	orr.w	r3, r2, r3
  b8:	600b      	str	r3, [r1, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2083
  }
}
  ba:	f107 0714 	add.w	r7, r7, #20	; 0x14
  be:	46bd      	mov	sp, r7
  c0:	bc80      	pop	{r7}
  c2:	4770      	bx	lr
Disassembly of section .text.TIM_UpdateDisableConfig:

00000000 <TIM_UpdateDisableConfig>:
TIM_UpdateDisableConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2093
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	72fb      	strb	r3, [r7, #11]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2097
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   c:	7afb      	ldrb	r3, [r7, #11]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_UpdateDisableConfig+0x24>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2100
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
  12:	68fb      	ldr	r3, [r7, #12]
  14:	881b      	ldrh	r3, [r3, #0]
  16:	b29b      	uxth	r3, r3
  18:	f043 0302 	orr.w	r3, r3, #2	; 0x2
  1c:	b29b      	uxth	r3, r3
  1e:	68fa      	ldr	r2, [r7, #12]
  20:	8013      	strh	r3, [r2, #0]
  22:	e00f      	b.n	44 <TIM_UpdateDisableConfig+0x44>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2105
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
  24:	68fb      	ldr	r3, [r7, #12]
  26:	881b      	ldrh	r3, [r3, #0]
  28:	b29b      	uxth	r3, r3
  2a:	607b      	str	r3, [r7, #4]
  2c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
  30:	f2c0 0300 	movt	r3, #0	; 0x0
  34:	6879      	ldr	r1, [r7, #4]
  36:	ea01 0303 	and.w	r3, r1, r3
  3a:	607b      	str	r3, [r7, #4]
  3c:	68fa      	ldr	r2, [r7, #12]
  3e:	6879      	ldr	r1, [r7, #4]
  40:	460b      	mov	r3, r1
  42:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2107
  }
}
  44:	f107 0714 	add.w	r7, r7, #20	; 0x14
  48:	46bd      	mov	sp, r7
  4a:	bc80      	pop	{r7}
  4c:	4770      	bx	lr
  4e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_UpdateRequestConfig:

00000000 <TIM_UpdateRequestConfig>:
TIM_UpdateRequestConfig():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2121
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	817b      	strh	r3, [r7, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2125
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
   c:	897b      	ldrh	r3, [r7, #10]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_UpdateRequestConfig+0x24>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2128
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
  12:	68fb      	ldr	r3, [r7, #12]
  14:	881b      	ldrh	r3, [r3, #0]
  16:	b29b      	uxth	r3, r3
  18:	f043 0304 	orr.w	r3, r3, #4	; 0x4
  1c:	b29b      	uxth	r3, r3
  1e:	68fa      	ldr	r2, [r7, #12]
  20:	8013      	strh	r3, [r2, #0]
  22:	e00f      	b.n	44 <TIM_UpdateRequestConfig+0x44>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2133
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
  24:	68fb      	ldr	r3, [r7, #12]
  26:	881b      	ldrh	r3, [r3, #0]
  28:	b29b      	uxth	r3, r3
  2a:	607b      	str	r3, [r7, #4]
  2c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
  30:	f2c0 0300 	movt	r3, #0	; 0x0
  34:	6879      	ldr	r1, [r7, #4]
  36:	ea01 0303 	and.w	r3, r1, r3
  3a:	607b      	str	r3, [r7, #4]
  3c:	68fa      	ldr	r2, [r7, #12]
  3e:	6879      	ldr	r1, [r7, #4]
  40:	460b      	mov	r3, r1
  42:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2135
  }
}
  44:	f107 0714 	add.w	r7, r7, #20	; 0x14
  48:	46bd      	mov	sp, r7
  4a:	bc80      	pop	{r7}
  4c:	4770      	bx	lr
  4e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectHallSensor:

00000000 <TIM_SelectHallSensor>:
TIM_SelectHallSensor():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2145
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	72fb      	strb	r3, [r7, #11]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2149
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   c:	7afb      	ldrb	r3, [r7, #11]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_SelectHallSensor+0x24>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2152
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
  12:	68fb      	ldr	r3, [r7, #12]
  14:	889b      	ldrh	r3, [r3, #4]
  16:	b29b      	uxth	r3, r3
  18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  1c:	b29b      	uxth	r3, r3
  1e:	68fa      	ldr	r2, [r7, #12]
  20:	8093      	strh	r3, [r2, #4]
  22:	e00f      	b.n	44 <TIM_SelectHallSensor+0x44>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2157
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
  24:	68fb      	ldr	r3, [r7, #12]
  26:	889b      	ldrh	r3, [r3, #4]
  28:	b29b      	uxth	r3, r3
  2a:	607b      	str	r3, [r7, #4]
  2c:	f64f 737f 	movw	r3, #65407	; 0xff7f
  30:	f2c0 0300 	movt	r3, #0	; 0x0
  34:	6879      	ldr	r1, [r7, #4]
  36:	ea01 0303 	and.w	r3, r1, r3
  3a:	607b      	str	r3, [r7, #4]
  3c:	68fa      	ldr	r2, [r7, #12]
  3e:	6879      	ldr	r1, [r7, #4]
  40:	460b      	mov	r3, r1
  42:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2159
  }
}
  44:	f107 0714 	add.w	r7, r7, #20	; 0x14
  48:	46bd      	mov	sp, r7
  4a:	bc80      	pop	{r7}
  4c:	4770      	bx	lr
  4e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SelectOnePulseMode:

00000000 <TIM_SelectOnePulseMode>:
TIM_SelectOnePulseMode():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2171
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	817b      	strh	r3, [r7, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2176
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
   c:	68fb      	ldr	r3, [r7, #12]
   e:	881b      	ldrh	r3, [r3, #0]
  10:	b29b      	uxth	r3, r3
  12:	607b      	str	r3, [r7, #4]
  14:	f64f 73f7 	movw	r3, #65527	; 0xfff7
  18:	f2c0 0300 	movt	r3, #0	; 0x0
  1c:	6879      	ldr	r1, [r7, #4]
  1e:	ea01 0303 	and.w	r3, r1, r3
  22:	607b      	str	r3, [r7, #4]
  24:	68fa      	ldr	r2, [r7, #12]
  26:	6879      	ldr	r1, [r7, #4]
  28:	460b      	mov	r3, r1
  2a:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2178
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	881b      	ldrh	r3, [r3, #0]
  30:	b29a      	uxth	r2, r3
  32:	897b      	ldrh	r3, [r7, #10]
  34:	ea42 0303 	orr.w	r3, r2, r3
  38:	b29b      	uxth	r3, r3
  3a:	68fa      	ldr	r2, [r7, #12]
  3c:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2179
}
  3e:	f107 0714 	add.w	r7, r7, #20	; 0x14
  42:	46bd      	mov	sp, r7
  44:	bc80      	pop	{r7}
  46:	4770      	bx	lr
Disassembly of section .text.TIM_SelectOutputTrigger:

00000000 <TIM_SelectOutputTrigger>:
TIM_SelectOutputTrigger():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2203
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	817b      	strh	r3, [r7, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2208
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
   c:	68fb      	ldr	r3, [r7, #12]
   e:	889b      	ldrh	r3, [r3, #4]
  10:	b29b      	uxth	r3, r3
  12:	607b      	str	r3, [r7, #4]
  14:	f64f 738f 	movw	r3, #65423	; 0xff8f
  18:	f2c0 0300 	movt	r3, #0	; 0x0
  1c:	6879      	ldr	r1, [r7, #4]
  1e:	ea01 0303 	and.w	r3, r1, r3
  22:	607b      	str	r3, [r7, #4]
  24:	68fa      	ldr	r2, [r7, #12]
  26:	6879      	ldr	r1, [r7, #4]
  28:	460b      	mov	r3, r1
  2a:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2210
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	889b      	ldrh	r3, [r3, #4]
  30:	b29a      	uxth	r2, r3
  32:	897b      	ldrh	r3, [r7, #10]
  34:	ea42 0303 	orr.w	r3, r2, r3
  38:	b29b      	uxth	r3, r3
  3a:	68fa      	ldr	r2, [r7, #12]
  3c:	8093      	strh	r3, [r2, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2211
}
  3e:	f107 0714 	add.w	r7, r7, #20	; 0x14
  42:	46bd      	mov	sp, r7
  44:	bc80      	pop	{r7}
  46:	4770      	bx	lr
Disassembly of section .text.TIM_SelectSlaveMode:

00000000 <TIM_SelectSlaveMode>:
TIM_SelectSlaveMode():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2226
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	817b      	strh	r3, [r7, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2231
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
   c:	68fb      	ldr	r3, [r7, #12]
   e:	891b      	ldrh	r3, [r3, #8]
  10:	b29b      	uxth	r3, r3
  12:	607b      	str	r3, [r7, #4]
  14:	f64f 73f8 	movw	r3, #65528	; 0xfff8
  18:	f2c0 0300 	movt	r3, #0	; 0x0
  1c:	6879      	ldr	r1, [r7, #4]
  1e:	ea01 0303 	and.w	r3, r1, r3
  22:	607b      	str	r3, [r7, #4]
  24:	68fa      	ldr	r2, [r7, #12]
  26:	6879      	ldr	r1, [r7, #4]
  28:	460b      	mov	r3, r1
  2a:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2233
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	891b      	ldrh	r3, [r3, #8]
  30:	b29a      	uxth	r2, r3
  32:	897b      	ldrh	r3, [r7, #10]
  34:	ea42 0303 	orr.w	r3, r2, r3
  38:	b29b      	uxth	r3, r3
  3a:	68fa      	ldr	r2, [r7, #12]
  3c:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2234
}
  3e:	f107 0714 	add.w	r7, r7, #20	; 0x14
  42:	46bd      	mov	sp, r7
  44:	bc80      	pop	{r7}
  46:	4770      	bx	lr
Disassembly of section .text.TIM_SelectMasterSlaveMode:

00000000 <TIM_SelectMasterSlaveMode>:
TIM_SelectMasterSlaveMode():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2247
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	817b      	strh	r3, [r7, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2252
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
   c:	68fb      	ldr	r3, [r7, #12]
   e:	891b      	ldrh	r3, [r3, #8]
  10:	b29b      	uxth	r3, r3
  12:	607b      	str	r3, [r7, #4]
  14:	f64f 737f 	movw	r3, #65407	; 0xff7f
  18:	f2c0 0300 	movt	r3, #0	; 0x0
  1c:	6879      	ldr	r1, [r7, #4]
  1e:	ea01 0303 	and.w	r3, r1, r3
  22:	607b      	str	r3, [r7, #4]
  24:	68fa      	ldr	r2, [r7, #12]
  26:	6879      	ldr	r1, [r7, #4]
  28:	460b      	mov	r3, r1
  2a:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2255
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	891b      	ldrh	r3, [r3, #8]
  30:	b29a      	uxth	r2, r3
  32:	897b      	ldrh	r3, [r7, #10]
  34:	ea42 0303 	orr.w	r3, r2, r3
  38:	b29b      	uxth	r3, r3
  3a:	68fa      	ldr	r2, [r7, #12]
  3c:	8113      	strh	r3, [r2, #8]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2256
}
  3e:	f107 0714 	add.w	r7, r7, #20	; 0x14
  42:	46bd      	mov	sp, r7
  44:	bc80      	pop	{r7}
  46:	4770      	bx	lr
Disassembly of section .text.TIM_SetCounter:

00000000 <TIM_SetCounter>:
TIM_SetCounter():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2265
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2269
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
   c:	687a      	ldr	r2, [r7, #4]
   e:	887b      	ldrh	r3, [r7, #2]
  10:	8493      	strh	r3, [r2, #36]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2270
}
  12:	f107 070c 	add.w	r7, r7, #12	; 0xc
  16:	46bd      	mov	sp, r7
  18:	bc80      	pop	{r7}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_SetAutoreload:

00000000 <TIM_SetAutoreload>:
TIM_SetAutoreload():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2279
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2283
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
   c:	687a      	ldr	r2, [r7, #4]
   e:	887b      	ldrh	r3, [r7, #2]
  10:	8593      	strh	r3, [r2, #44]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2284
}
  12:	f107 070c 	add.w	r7, r7, #12	; 0xc
  16:	46bd      	mov	sp, r7
  18:	bc80      	pop	{r7}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare1:

00000000 <TIM_SetCompare1>:
TIM_SetCompare1():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2293
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2297
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
   c:	687a      	ldr	r2, [r7, #4]
   e:	887b      	ldrh	r3, [r7, #2]
  10:	8693      	strh	r3, [r2, #52]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2298
}
  12:	f107 070c 	add.w	r7, r7, #12	; 0xc
  16:	46bd      	mov	sp, r7
  18:	bc80      	pop	{r7}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare2:

00000000 <TIM_SetCompare2>:
TIM_SetCompare2():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2307
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2311
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
   c:	687a      	ldr	r2, [r7, #4]
   e:	887b      	ldrh	r3, [r7, #2]
  10:	8713      	strh	r3, [r2, #56]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2312
}
  12:	f107 070c 	add.w	r7, r7, #12	; 0xc
  16:	46bd      	mov	sp, r7
  18:	bc80      	pop	{r7}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare3:

00000000 <TIM_SetCompare3>:
TIM_SetCompare3():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2321
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2325
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
   c:	687a      	ldr	r2, [r7, #4]
   e:	887b      	ldrh	r3, [r7, #2]
  10:	8793      	strh	r3, [r2, #60]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2326
}
  12:	f107 070c 	add.w	r7, r7, #12	; 0xc
  16:	46bd      	mov	sp, r7
  18:	bc80      	pop	{r7}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_SetCompare4:

00000000 <TIM_SetCompare4>:
TIM_SetCompare4():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2335
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2339
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
   c:	687a      	ldr	r2, [r7, #4]
   e:	887b      	ldrh	r3, [r7, #2]
  10:	f8a2 3040 	strh.w	r3, [r2, #64]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2340
}
  14:	f107 070c 	add.w	r7, r7, #12	; 0xc
  18:	46bd      	mov	sp, r7
  1a:	bc80      	pop	{r7}
  1c:	4770      	bx	lr
  1e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetIC1Prescaler:

00000000 <TIM_SetIC1Prescaler>:
TIM_SetIC1Prescaler():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2354
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	817b      	strh	r3, [r7, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2359
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
   c:	68fb      	ldr	r3, [r7, #12]
   e:	8b1b      	ldrh	r3, [r3, #24]
  10:	b29b      	uxth	r3, r3
  12:	607b      	str	r3, [r7, #4]
  14:	f64f 73f3 	movw	r3, #65523	; 0xfff3
  18:	f2c0 0300 	movt	r3, #0	; 0x0
  1c:	6879      	ldr	r1, [r7, #4]
  1e:	ea01 0303 	and.w	r3, r1, r3
  22:	607b      	str	r3, [r7, #4]
  24:	68fa      	ldr	r2, [r7, #12]
  26:	6879      	ldr	r1, [r7, #4]
  28:	460b      	mov	r3, r1
  2a:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2361
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	8b1b      	ldrh	r3, [r3, #24]
  30:	b29a      	uxth	r2, r3
  32:	897b      	ldrh	r3, [r7, #10]
  34:	ea42 0303 	orr.w	r3, r2, r3
  38:	b29b      	uxth	r3, r3
  3a:	68fa      	ldr	r2, [r7, #12]
  3c:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2362
}
  3e:	f107 0714 	add.w	r7, r7, #20	; 0x14
  42:	46bd      	mov	sp, r7
  44:	bc80      	pop	{r7}
  46:	4770      	bx	lr
Disassembly of section .text.TIM_SetIC2Prescaler:

00000000 <TIM_SetIC2Prescaler>:
TIM_SetIC2Prescaler():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2376
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	817b      	strh	r3, [r7, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2381
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
   c:	68fb      	ldr	r3, [r7, #12]
   e:	8b1b      	ldrh	r3, [r3, #24]
  10:	b29b      	uxth	r3, r3
  12:	607b      	str	r3, [r7, #4]
  14:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  18:	f2c0 0300 	movt	r3, #0	; 0x0
  1c:	6879      	ldr	r1, [r7, #4]
  1e:	ea01 0303 	and.w	r3, r1, r3
  22:	607b      	str	r3, [r7, #4]
  24:	68fa      	ldr	r2, [r7, #12]
  26:	6879      	ldr	r1, [r7, #4]
  28:	460b      	mov	r3, r1
  2a:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2383
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	8b1b      	ldrh	r3, [r3, #24]
  30:	b29a      	uxth	r2, r3
  32:	897b      	ldrh	r3, [r7, #10]
  34:	ea4f 2303 	mov.w	r3, r3, lsl #8
  38:	b29b      	uxth	r3, r3
  3a:	ea42 0303 	orr.w	r3, r2, r3
  3e:	b29b      	uxth	r3, r3
  40:	68fa      	ldr	r2, [r7, #12]
  42:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2384
}
  44:	f107 0714 	add.w	r7, r7, #20	; 0x14
  48:	46bd      	mov	sp, r7
  4a:	bc80      	pop	{r7}
  4c:	4770      	bx	lr
  4e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetIC3Prescaler:

00000000 <TIM_SetIC3Prescaler>:
TIM_SetIC3Prescaler():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2398
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	817b      	strh	r3, [r7, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2403
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
   c:	68fb      	ldr	r3, [r7, #12]
   e:	8b9b      	ldrh	r3, [r3, #28]
  10:	b29b      	uxth	r3, r3
  12:	607b      	str	r3, [r7, #4]
  14:	f64f 73f3 	movw	r3, #65523	; 0xfff3
  18:	f2c0 0300 	movt	r3, #0	; 0x0
  1c:	6879      	ldr	r1, [r7, #4]
  1e:	ea01 0303 	and.w	r3, r1, r3
  22:	607b      	str	r3, [r7, #4]
  24:	68fa      	ldr	r2, [r7, #12]
  26:	6879      	ldr	r1, [r7, #4]
  28:	460b      	mov	r3, r1
  2a:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2405
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	8b9b      	ldrh	r3, [r3, #28]
  30:	b29a      	uxth	r2, r3
  32:	897b      	ldrh	r3, [r7, #10]
  34:	ea42 0303 	orr.w	r3, r2, r3
  38:	b29b      	uxth	r3, r3
  3a:	68fa      	ldr	r2, [r7, #12]
  3c:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2406
}
  3e:	f107 0714 	add.w	r7, r7, #20	; 0x14
  42:	46bd      	mov	sp, r7
  44:	bc80      	pop	{r7}
  46:	4770      	bx	lr
Disassembly of section .text.TIM_SetIC4Prescaler:

00000000 <TIM_SetIC4Prescaler>:
TIM_SetIC4Prescaler():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2420
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	817b      	strh	r3, [r7, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2425
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
   c:	68fb      	ldr	r3, [r7, #12]
   e:	8b9b      	ldrh	r3, [r3, #28]
  10:	b29b      	uxth	r3, r3
  12:	607b      	str	r3, [r7, #4]
  14:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  18:	f2c0 0300 	movt	r3, #0	; 0x0
  1c:	6879      	ldr	r1, [r7, #4]
  1e:	ea01 0303 	and.w	r3, r1, r3
  22:	607b      	str	r3, [r7, #4]
  24:	68fa      	ldr	r2, [r7, #12]
  26:	6879      	ldr	r1, [r7, #4]
  28:	460b      	mov	r3, r1
  2a:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2427
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	8b9b      	ldrh	r3, [r3, #28]
  30:	b29a      	uxth	r2, r3
  32:	897b      	ldrh	r3, [r7, #10]
  34:	ea4f 2303 	mov.w	r3, r3, lsl #8
  38:	b29b      	uxth	r3, r3
  3a:	ea42 0303 	orr.w	r3, r2, r3
  3e:	b29b      	uxth	r3, r3
  40:	68fa      	ldr	r2, [r7, #12]
  42:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2428
}
  44:	f107 0714 	add.w	r7, r7, #20	; 0x14
  48:	46bd      	mov	sp, r7
  4a:	bc80      	pop	{r7}
  4c:	4770      	bx	lr
  4e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_SetClockDivision:

00000000 <TIM_SetClockDivision>:
TIM_SetClockDivision():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2442
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	460b      	mov	r3, r1
   a:	817b      	strh	r3, [r7, #10]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2447
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
   c:	68fb      	ldr	r3, [r7, #12]
   e:	881b      	ldrh	r3, [r3, #0]
  10:	b29b      	uxth	r3, r3
  12:	607b      	str	r3, [r7, #4]
  14:	f64f 43ff 	movw	r3, #64767	; 0xfcff
  18:	f2c0 0300 	movt	r3, #0	; 0x0
  1c:	6879      	ldr	r1, [r7, #4]
  1e:	ea01 0303 	and.w	r3, r1, r3
  22:	607b      	str	r3, [r7, #4]
  24:	68fa      	ldr	r2, [r7, #12]
  26:	6879      	ldr	r1, [r7, #4]
  28:	460b      	mov	r3, r1
  2a:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2449
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	881b      	ldrh	r3, [r3, #0]
  30:	b29a      	uxth	r2, r3
  32:	897b      	ldrh	r3, [r7, #10]
  34:	ea42 0303 	orr.w	r3, r2, r3
  38:	b29b      	uxth	r3, r3
  3a:	68fa      	ldr	r2, [r7, #12]
  3c:	8013      	strh	r3, [r2, #0]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2450
}
  3e:	f107 0714 	add.w	r7, r7, #20	; 0x14
  42:	46bd      	mov	sp, r7
  44:	bc80      	pop	{r7}
  46:	4770      	bx	lr
Disassembly of section .text.TIM_GetCapture1:

00000000 <TIM_GetCapture1>:
TIM_GetCapture1():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2458
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2462
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
   8:	687b      	ldr	r3, [r7, #4]
   a:	8e9b      	ldrh	r3, [r3, #52]
   c:	b29b      	uxth	r3, r3
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2463
}
   e:	4618      	mov	r0, r3
  10:	f107 070c 	add.w	r7, r7, #12	; 0xc
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetCapture2:

00000000 <TIM_GetCapture2>:
TIM_GetCapture2():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2471
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2475
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
   8:	687b      	ldr	r3, [r7, #4]
   a:	8f1b      	ldrh	r3, [r3, #56]
   c:	b29b      	uxth	r3, r3
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2476
}
   e:	4618      	mov	r0, r3
  10:	f107 070c 	add.w	r7, r7, #12	; 0xc
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetCapture3:

00000000 <TIM_GetCapture3>:
TIM_GetCapture3():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2484
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2488
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
   8:	687b      	ldr	r3, [r7, #4]
   a:	8f9b      	ldrh	r3, [r3, #60]
   c:	b29b      	uxth	r3, r3
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2489
}
   e:	4618      	mov	r0, r3
  10:	f107 070c 	add.w	r7, r7, #12	; 0xc
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetCapture4:

00000000 <TIM_GetCapture4>:
TIM_GetCapture4():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2497
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2501
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
   8:	687b      	ldr	r3, [r7, #4]
   a:	f8b3 3040 	ldrh.w	r3, [r3, #64]
   e:	b29b      	uxth	r3, r3
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2502
}
  10:	4618      	mov	r0, r3
  12:	f107 070c 	add.w	r7, r7, #12	; 0xc
  16:	46bd      	mov	sp, r7
  18:	bc80      	pop	{r7}
  1a:	4770      	bx	lr
Disassembly of section .text.TIM_GetCounter:

00000000 <TIM_GetCounter>:
TIM_GetCounter():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2510
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2514
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
   8:	687b      	ldr	r3, [r7, #4]
   a:	8c9b      	ldrh	r3, [r3, #36]
   c:	b29b      	uxth	r3, r3
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2515
}
   e:	4618      	mov	r0, r3
  10:	f107 070c 	add.w	r7, r7, #12	; 0xc
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetPrescaler:

00000000 <TIM_GetPrescaler>:
TIM_GetPrescaler():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2523
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2527
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
   8:	687b      	ldr	r3, [r7, #4]
   a:	8d1b      	ldrh	r3, [r3, #40]
   c:	b29b      	uxth	r3, r3
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2528
}
   e:	4618      	mov	r0, r3
  10:	f107 070c 	add.w	r7, r7, #12	; 0xc
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetFlagStatus:

00000000 <TIM_GetFlagStatus>:
TIM_GetFlagStatus():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2557
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2558
  ITStatus bitstatus = RESET;  
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	73fb      	strb	r3, [r7, #15]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2563
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
  12:	687b      	ldr	r3, [r7, #4]
  14:	8a1b      	ldrh	r3, [r3, #16]
  16:	b29a      	uxth	r2, r3
  18:	887b      	ldrh	r3, [r7, #2]
  1a:	ea02 0303 	and.w	r3, r2, r3
  1e:	b29b      	uxth	r3, r3
  20:	2b00      	cmp	r3, #0
  22:	d003      	beq.n	2c <TIM_GetFlagStatus+0x2c>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2565
  {
    bitstatus = SET;
  24:	f04f 0301 	mov.w	r3, #1	; 0x1
  28:	73fb      	strb	r3, [r7, #15]
  2a:	e002      	b.n	32 <TIM_GetFlagStatus+0x32>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2569
  }
  else
  {
    bitstatus = RESET;
  2c:	f04f 0300 	mov.w	r3, #0	; 0x0
  30:	73fb      	strb	r3, [r7, #15]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2571
  }
  return bitstatus;
  32:	7bfb      	ldrb	r3, [r7, #15]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2572
}
  34:	4618      	mov	r0, r3
  36:	f107 0714 	add.w	r7, r7, #20	; 0x14
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr
Disassembly of section .text.TIM_ClearFlag:

00000000 <TIM_ClearFlag>:
TIM_ClearFlag():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2601
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2607
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
   c:	887b      	ldrh	r3, [r7, #2]
   e:	ea6f 0303 	mvn.w	r3, r3
  12:	b29b      	uxth	r3, r3
  14:	687a      	ldr	r2, [r7, #4]
  16:	8213      	strh	r3, [r2, #16]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2608
}
  18:	f107 070c 	add.w	r7, r7, #12	; 0xc
  1c:	46bd      	mov	sp, r7
  1e:	bc80      	pop	{r7}
  20:	4770      	bx	lr
  22:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_GetITStatus:

00000000 <TIM_GetITStatus>:
TIM_GetITStatus():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2633
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2634
  ITStatus bitstatus = RESET;  
   c:	f04f 0300 	mov.w	r3, #0	; 0x0
  10:	72fb      	strb	r3, [r7, #11]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2635
  uint16_t itstatus = 0x0, itenable = 0x0;
  12:	f04f 0300 	mov.w	r3, #0	; 0x0
  16:	81bb      	strh	r3, [r7, #12]
  18:	f04f 0300 	mov.w	r3, #0	; 0x0
  1c:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2640
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  1e:	687b      	ldr	r3, [r7, #4]
  20:	8a1b      	ldrh	r3, [r3, #16]
  22:	b29a      	uxth	r2, r3
  24:	887b      	ldrh	r3, [r7, #2]
  26:	ea02 0303 	and.w	r3, r2, r3
  2a:	81bb      	strh	r3, [r7, #12]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2642
  
  itenable = TIMx->DIER & TIM_IT;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	899b      	ldrh	r3, [r3, #12]
  30:	b29a      	uxth	r2, r3
  32:	887b      	ldrh	r3, [r7, #2]
  34:	ea02 0303 	and.w	r3, r2, r3
  38:	81fb      	strh	r3, [r7, #14]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2643
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
  3a:	89bb      	ldrh	r3, [r7, #12]
  3c:	2b00      	cmp	r3, #0
  3e:	d006      	beq.n	4e <TIM_GetITStatus+0x4e>
  40:	89fb      	ldrh	r3, [r7, #14]
  42:	2b00      	cmp	r3, #0
  44:	d003      	beq.n	4e <TIM_GetITStatus+0x4e>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2645
  {
    bitstatus = SET;
  46:	f04f 0301 	mov.w	r3, #1	; 0x1
  4a:	72fb      	strb	r3, [r7, #11]
  4c:	e002      	b.n	54 <TIM_GetITStatus+0x54>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2649
  }
  else
  {
    bitstatus = RESET;
  4e:	f04f 0300 	mov.w	r3, #0	; 0x0
  52:	72fb      	strb	r3, [r7, #11]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2651
  }
  return bitstatus;
  54:	7afb      	ldrb	r3, [r7, #11]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2652
}
  56:	4618      	mov	r0, r3
  58:	f107 0714 	add.w	r7, r7, #20	; 0x14
  5c:	46bd      	mov	sp, r7
  5e:	bc80      	pop	{r7}
  60:	4770      	bx	lr
  62:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TIM_ClearITPendingBit:

00000000 <TIM_ClearITPendingBit>:
TIM_ClearITPendingBit():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2677
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2682
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
   c:	887b      	ldrh	r3, [r7, #2]
   e:	ea6f 0303 	mvn.w	r3, r3
  12:	b29b      	uxth	r3, r3
  14:	687a      	ldr	r2, [r7, #4]
  16:	8213      	strh	r3, [r2, #16]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2683
}
  18:	f107 070c 	add.w	r7, r7, #12	; 0xc
  1c:	46bd      	mov	sp, r7
  1e:	bc80      	pop	{r7}
  20:	4770      	bx	lr
  22:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TI1_Config:

00000000 <TI1_Config>:
TI1_Config():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2703
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	4618      	mov	r0, r3
   a:	460b      	mov	r3, r1
   c:	817b      	strh	r3, [r7, #10]
   e:	4613      	mov	r3, r2
  10:	813b      	strh	r3, [r7, #8]
  12:	4603      	mov	r3, r0
  14:	80fb      	strh	r3, [r7, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2704
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	82bb      	strh	r3, [r7, #20]
  1c:	f04f 0300 	mov.w	r3, #0	; 0x0
  20:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2706
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  22:	68fb      	ldr	r3, [r7, #12]
  24:	8c1b      	ldrh	r3, [r3, #32]
  26:	b29b      	uxth	r3, r3
  28:	603b      	str	r3, [r7, #0]
  2a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  2e:	f2c0 0300 	movt	r3, #0	; 0x0
  32:	6839      	ldr	r1, [r7, #0]
  34:	ea01 0303 	and.w	r3, r1, r3
  38:	603b      	str	r3, [r7, #0]
  3a:	68fa      	ldr	r2, [r7, #12]
  3c:	6839      	ldr	r1, [r7, #0]
  3e:	460b      	mov	r3, r1
  40:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2707
  tmpccmr1 = TIMx->CCMR1;
  42:	68fb      	ldr	r3, [r7, #12]
  44:	8b1b      	ldrh	r3, [r3, #24]
  46:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2708
  tmpccer = TIMx->CCER;
  48:	68fb      	ldr	r3, [r7, #12]
  4a:	8c1b      	ldrh	r3, [r3, #32]
  4c:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2710
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  4e:	8abb      	ldrh	r3, [r7, #20]
  50:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
  54:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2711
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  56:	88fb      	ldrh	r3, [r7, #6]
  58:	ea4f 1303 	mov.w	r3, r3, lsl #4
  5c:	b29a      	uxth	r2, r3
  5e:	893b      	ldrh	r3, [r7, #8]
  60:	ea42 0303 	orr.w	r3, r2, r3
  64:	b29a      	uxth	r2, r3
  66:	8abb      	ldrh	r3, [r7, #20]
  68:	ea42 0303 	orr.w	r3, r2, r3
  6c:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2713
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
  6e:	68fa      	ldr	r2, [r7, #12]
  70:	f642 4300 	movw	r3, #11264	; 0x2c00
  74:	f2c4 0301 	movt	r3, #16385	; 0x4001
  78:	429a      	cmp	r2, r3
  7a:	d01f      	beq.n	bc <TI1_Config+0xbc>
  7c:	68fa      	ldr	r2, [r7, #12]
  7e:	f243 4300 	movw	r3, #13312	; 0x3400
  82:	f2c4 0301 	movt	r3, #16385	; 0x4001
  86:	429a      	cmp	r2, r3
  88:	d018      	beq.n	bc <TI1_Config+0xbc>
  8a:	68fb      	ldr	r3, [r7, #12]
  8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  90:	d014      	beq.n	bc <TI1_Config+0xbc>
  92:	68fa      	ldr	r2, [r7, #12]
  94:	f240 4300 	movw	r3, #1024	; 0x400
  98:	f2c4 0300 	movt	r3, #16384	; 0x4000
  9c:	429a      	cmp	r2, r3
  9e:	d00d      	beq.n	bc <TI1_Config+0xbc>
  a0:	68fa      	ldr	r2, [r7, #12]
  a2:	f640 0300 	movw	r3, #2048	; 0x800
  a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
  aa:	429a      	cmp	r2, r3
  ac:	d006      	beq.n	bc <TI1_Config+0xbc>
  ae:	68fa      	ldr	r2, [r7, #12]
  b0:	f640 4300 	movw	r3, #3072	; 0xc00
  b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
  b8:	429a      	cmp	r2, r3
  ba:	d10c      	bne.n	d6 <TI1_Config+0xd6>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2717
     (TIMx == TIM4) ||(TIMx == TIM5))
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
  bc:	8afb      	ldrh	r3, [r7, #22]
  be:	f023 0302 	bic.w	r3, r3, #2	; 0x2
  c2:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2718
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  c4:	897a      	ldrh	r2, [r7, #10]
  c6:	8afb      	ldrh	r3, [r7, #22]
  c8:	ea42 0303 	orr.w	r3, r2, r3
  cc:	b29b      	uxth	r3, r3
  ce:	f043 0301 	orr.w	r3, r3, #1	; 0x1
  d2:	82fb      	strh	r3, [r7, #22]
  d4:	e00b      	b.n	ee <TI1_Config+0xee>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2723
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  d6:	8afb      	ldrh	r3, [r7, #22]
  d8:	f023 030a 	bic.w	r3, r3, #10	; 0xa
  dc:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2724
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  de:	897a      	ldrh	r2, [r7, #10]
  e0:	8afb      	ldrh	r3, [r7, #22]
  e2:	ea42 0303 	orr.w	r3, r2, r3
  e6:	b29b      	uxth	r3, r3
  e8:	f043 0301 	orr.w	r3, r3, #1	; 0x1
  ec:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2728
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  ee:	68fa      	ldr	r2, [r7, #12]
  f0:	8abb      	ldrh	r3, [r7, #20]
  f2:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2729
  TIMx->CCER = tmpccer;
  f4:	68fa      	ldr	r2, [r7, #12]
  f6:	8afb      	ldrh	r3, [r7, #22]
  f8:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2730
}
  fa:	f107 071c 	add.w	r7, r7, #28	; 0x1c
  fe:	46bd      	mov	sp, r7
 100:	bc80      	pop	{r7}
 102:	4770      	bx	lr
Disassembly of section .text.TI2_Config:

00000000 <TI2_Config>:
TI2_Config():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2750
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	4618      	mov	r0, r3
   a:	460b      	mov	r3, r1
   c:	817b      	strh	r3, [r7, #10]
   e:	4613      	mov	r3, r2
  10:	813b      	strh	r3, [r7, #8]
  12:	4603      	mov	r3, r0
  14:	80fb      	strh	r3, [r7, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2751
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	827b      	strh	r3, [r7, #18]
  1c:	f04f 0300 	mov.w	r3, #0	; 0x0
  20:	82bb      	strh	r3, [r7, #20]
  22:	f04f 0300 	mov.w	r3, #0	; 0x0
  26:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2753
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  28:	68fb      	ldr	r3, [r7, #12]
  2a:	8c1b      	ldrh	r3, [r3, #32]
  2c:	b29b      	uxth	r3, r3
  2e:	603b      	str	r3, [r7, #0]
  30:	f64f 73ef 	movw	r3, #65519	; 0xffef
  34:	f2c0 0300 	movt	r3, #0	; 0x0
  38:	6839      	ldr	r1, [r7, #0]
  3a:	ea01 0303 	and.w	r3, r1, r3
  3e:	603b      	str	r3, [r7, #0]
  40:	68fa      	ldr	r2, [r7, #12]
  42:	6839      	ldr	r1, [r7, #0]
  44:	460b      	mov	r3, r1
  46:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2754
  tmpccmr1 = TIMx->CCMR1;
  48:	68fb      	ldr	r3, [r7, #12]
  4a:	8b1b      	ldrh	r3, [r3, #24]
  4c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2755
  tmpccer = TIMx->CCER;
  4e:	68fb      	ldr	r3, [r7, #12]
  50:	8c1b      	ldrh	r3, [r3, #32]
  52:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2756
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  54:	897b      	ldrh	r3, [r7, #10]
  56:	ea4f 1303 	mov.w	r3, r3, lsl #4
  5a:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2758
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  5c:	8a7b      	ldrh	r3, [r7, #18]
  5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  62:	ea4f 5303 	mov.w	r3, r3, lsl #20
  66:	ea4f 5313 	mov.w	r3, r3, lsr #20
  6a:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2759
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  6c:	88fb      	ldrh	r3, [r7, #6]
  6e:	ea4f 3303 	mov.w	r3, r3, lsl #12
  72:	b29a      	uxth	r2, r3
  74:	8a7b      	ldrh	r3, [r7, #18]
  76:	ea42 0303 	orr.w	r3, r2, r3
  7a:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2760
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  7c:	893b      	ldrh	r3, [r7, #8]
  7e:	ea4f 2303 	mov.w	r3, r3, lsl #8
  82:	b29a      	uxth	r2, r3
  84:	8a7b      	ldrh	r3, [r7, #18]
  86:	ea42 0303 	orr.w	r3, r2, r3
  8a:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2762
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
  8c:	68fa      	ldr	r2, [r7, #12]
  8e:	f642 4300 	movw	r3, #11264	; 0x2c00
  92:	f2c4 0301 	movt	r3, #16385	; 0x4001
  96:	429a      	cmp	r2, r3
  98:	d01f      	beq.n	da <TI2_Config+0xda>
  9a:	68fa      	ldr	r2, [r7, #12]
  9c:	f243 4300 	movw	r3, #13312	; 0x3400
  a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
  a4:	429a      	cmp	r2, r3
  a6:	d018      	beq.n	da <TI2_Config+0xda>
  a8:	68fb      	ldr	r3, [r7, #12]
  aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  ae:	d014      	beq.n	da <TI2_Config+0xda>
  b0:	68fa      	ldr	r2, [r7, #12]
  b2:	f240 4300 	movw	r3, #1024	; 0x400
  b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
  ba:	429a      	cmp	r2, r3
  bc:	d00d      	beq.n	da <TI2_Config+0xda>
  be:	68fa      	ldr	r2, [r7, #12]
  c0:	f640 0300 	movw	r3, #2048	; 0x800
  c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
  c8:	429a      	cmp	r2, r3
  ca:	d006      	beq.n	da <TI2_Config+0xda>
  cc:	68fa      	ldr	r2, [r7, #12]
  ce:	f640 4300 	movw	r3, #3072	; 0xc00
  d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
  d6:	429a      	cmp	r2, r3
  d8:	d10c      	bne.n	f4 <TI2_Config+0xf4>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2766
     (TIMx == TIM4) ||(TIMx == TIM5))
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
  da:	8abb      	ldrh	r3, [r7, #20]
  dc:	f023 0320 	bic.w	r3, r3, #32	; 0x20
  e0:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2767
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
  e2:	8afa      	ldrh	r2, [r7, #22]
  e4:	8abb      	ldrh	r3, [r7, #20]
  e6:	ea42 0303 	orr.w	r3, r2, r3
  ea:	b29b      	uxth	r3, r3
  ec:	f043 0310 	orr.w	r3, r3, #16	; 0x10
  f0:	82bb      	strh	r3, [r7, #20]
  f2:	e00b      	b.n	10c <TI2_Config+0x10c>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2772
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  f4:	8abb      	ldrh	r3, [r7, #20]
  f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  fa:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2773
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
  fc:	897a      	ldrh	r2, [r7, #10]
  fe:	8abb      	ldrh	r3, [r7, #20]
 100:	ea42 0303 	orr.w	r3, r2, r3
 104:	b29b      	uxth	r3, r3
 106:	f043 0310 	orr.w	r3, r3, #16	; 0x10
 10a:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2777
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 10c:	68fa      	ldr	r2, [r7, #12]
 10e:	8a7b      	ldrh	r3, [r7, #18]
 110:	8313      	strh	r3, [r2, #24]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2778
  TIMx->CCER = tmpccer;
 112:	68fa      	ldr	r2, [r7, #12]
 114:	8abb      	ldrh	r3, [r7, #20]
 116:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2779
}
 118:	f107 071c 	add.w	r7, r7, #28	; 0x1c
 11c:	46bd      	mov	sp, r7
 11e:	bc80      	pop	{r7}
 120:	4770      	bx	lr
 122:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TI3_Config:

00000000 <TI3_Config>:
TI3_Config():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2799
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	4618      	mov	r0, r3
   a:	460b      	mov	r3, r1
   c:	817b      	strh	r3, [r7, #10]
   e:	4613      	mov	r3, r2
  10:	813b      	strh	r3, [r7, #8]
  12:	4603      	mov	r3, r0
  14:	80fb      	strh	r3, [r7, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2800
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	827b      	strh	r3, [r7, #18]
  1c:	f04f 0300 	mov.w	r3, #0	; 0x0
  20:	82bb      	strh	r3, [r7, #20]
  22:	f04f 0300 	mov.w	r3, #0	; 0x0
  26:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2802
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  28:	68fb      	ldr	r3, [r7, #12]
  2a:	8c1b      	ldrh	r3, [r3, #32]
  2c:	b29b      	uxth	r3, r3
  2e:	603b      	str	r3, [r7, #0]
  30:	f64f 63ff 	movw	r3, #65279	; 0xfeff
  34:	f2c0 0300 	movt	r3, #0	; 0x0
  38:	6839      	ldr	r1, [r7, #0]
  3a:	ea01 0303 	and.w	r3, r1, r3
  3e:	603b      	str	r3, [r7, #0]
  40:	68fa      	ldr	r2, [r7, #12]
  42:	6839      	ldr	r1, [r7, #0]
  44:	460b      	mov	r3, r1
  46:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2803
  tmpccmr2 = TIMx->CCMR2;
  48:	68fb      	ldr	r3, [r7, #12]
  4a:	8b9b      	ldrh	r3, [r3, #28]
  4c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2804
  tmpccer = TIMx->CCER;
  4e:	68fb      	ldr	r3, [r7, #12]
  50:	8c1b      	ldrh	r3, [r3, #32]
  52:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2805
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  54:	897b      	ldrh	r3, [r7, #10]
  56:	ea4f 2303 	mov.w	r3, r3, lsl #8
  5a:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2807
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  5c:	8a7b      	ldrh	r3, [r7, #18]
  5e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
  62:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2808
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  64:	88fb      	ldrh	r3, [r7, #6]
  66:	ea4f 1303 	mov.w	r3, r3, lsl #4
  6a:	b29a      	uxth	r2, r3
  6c:	893b      	ldrh	r3, [r7, #8]
  6e:	ea42 0303 	orr.w	r3, r2, r3
  72:	b29a      	uxth	r2, r3
  74:	8a7b      	ldrh	r3, [r7, #18]
  76:	ea42 0303 	orr.w	r3, r2, r3
  7a:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2810
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
  7c:	68fa      	ldr	r2, [r7, #12]
  7e:	f642 4300 	movw	r3, #11264	; 0x2c00
  82:	f2c4 0301 	movt	r3, #16385	; 0x4001
  86:	429a      	cmp	r2, r3
  88:	d01f      	beq.n	ca <TI3_Config+0xca>
  8a:	68fa      	ldr	r2, [r7, #12]
  8c:	f243 4300 	movw	r3, #13312	; 0x3400
  90:	f2c4 0301 	movt	r3, #16385	; 0x4001
  94:	429a      	cmp	r2, r3
  96:	d018      	beq.n	ca <TI3_Config+0xca>
  98:	68fb      	ldr	r3, [r7, #12]
  9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  9e:	d014      	beq.n	ca <TI3_Config+0xca>
  a0:	68fa      	ldr	r2, [r7, #12]
  a2:	f240 4300 	movw	r3, #1024	; 0x400
  a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
  aa:	429a      	cmp	r2, r3
  ac:	d00d      	beq.n	ca <TI3_Config+0xca>
  ae:	68fa      	ldr	r2, [r7, #12]
  b0:	f640 0300 	movw	r3, #2048	; 0x800
  b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
  b8:	429a      	cmp	r2, r3
  ba:	d006      	beq.n	ca <TI3_Config+0xca>
  bc:	68fa      	ldr	r2, [r7, #12]
  be:	f640 4300 	movw	r3, #3072	; 0xc00
  c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
  c6:	429a      	cmp	r2, r3
  c8:	d10c      	bne.n	e4 <TI3_Config+0xe4>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2814
     (TIMx == TIM4) ||(TIMx == TIM5))
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
  ca:	8abb      	ldrh	r3, [r7, #20]
  cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  d0:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2815
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
  d2:	8afa      	ldrh	r2, [r7, #22]
  d4:	8abb      	ldrh	r3, [r7, #20]
  d6:	ea42 0303 	orr.w	r3, r2, r3
  da:	b29b      	uxth	r3, r3
  dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  e0:	82bb      	strh	r3, [r7, #20]
  e2:	e00b      	b.n	fc <TI3_Config+0xfc>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2820
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
  e4:	8abb      	ldrh	r3, [r7, #20]
  e6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  ea:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2821
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
  ec:	897a      	ldrh	r2, [r7, #10]
  ee:	8abb      	ldrh	r3, [r7, #20]
  f0:	ea42 0303 	orr.w	r3, r2, r3
  f4:	b29b      	uxth	r3, r3
  f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  fa:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2825
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  fc:	68fa      	ldr	r2, [r7, #12]
  fe:	8a7b      	ldrh	r3, [r7, #18]
 100:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2826
  TIMx->CCER = tmpccer;
 102:	68fa      	ldr	r2, [r7, #12]
 104:	8abb      	ldrh	r3, [r7, #20]
 106:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2827
}
 108:	f107 071c 	add.w	r7, r7, #28	; 0x1c
 10c:	46bd      	mov	sp, r7
 10e:	bc80      	pop	{r7}
 110:	4770      	bx	lr
 112:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.TI4_Config:

00000000 <TI4_Config>:
TI4_Config():
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2847
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	4618      	mov	r0, r3
   a:	460b      	mov	r3, r1
   c:	817b      	strh	r3, [r7, #10]
   e:	4613      	mov	r3, r2
  10:	813b      	strh	r3, [r7, #8]
  12:	4603      	mov	r3, r0
  14:	80fb      	strh	r3, [r7, #6]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2848
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  16:	f04f 0300 	mov.w	r3, #0	; 0x0
  1a:	827b      	strh	r3, [r7, #18]
  1c:	f04f 0300 	mov.w	r3, #0	; 0x0
  20:	82bb      	strh	r3, [r7, #20]
  22:	f04f 0300 	mov.w	r3, #0	; 0x0
  26:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2851

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  28:	68fb      	ldr	r3, [r7, #12]
  2a:	8c1b      	ldrh	r3, [r3, #32]
  2c:	b29b      	uxth	r3, r3
  2e:	603b      	str	r3, [r7, #0]
  30:	f64e 73ff 	movw	r3, #61439	; 0xefff
  34:	f2c0 0300 	movt	r3, #0	; 0x0
  38:	6839      	ldr	r1, [r7, #0]
  3a:	ea01 0303 	and.w	r3, r1, r3
  3e:	603b      	str	r3, [r7, #0]
  40:	68fa      	ldr	r2, [r7, #12]
  42:	6839      	ldr	r1, [r7, #0]
  44:	460b      	mov	r3, r1
  46:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2852
  tmpccmr2 = TIMx->CCMR2;
  48:	68fb      	ldr	r3, [r7, #12]
  4a:	8b9b      	ldrh	r3, [r3, #28]
  4c:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2853
  tmpccer = TIMx->CCER;
  4e:	68fb      	ldr	r3, [r7, #12]
  50:	8c1b      	ldrh	r3, [r3, #32]
  52:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2854
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  54:	897b      	ldrh	r3, [r7, #10]
  56:	ea4f 3303 	mov.w	r3, r3, lsl #12
  5a:	82fb      	strh	r3, [r7, #22]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2856
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  5c:	8a7b      	ldrh	r3, [r7, #18]
  5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  62:	ea4f 5303 	mov.w	r3, r3, lsl #20
  66:	ea4f 5313 	mov.w	r3, r3, lsr #20
  6a:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2857
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  6c:	893b      	ldrh	r3, [r7, #8]
  6e:	ea4f 2303 	mov.w	r3, r3, lsl #8
  72:	b29a      	uxth	r2, r3
  74:	8a7b      	ldrh	r3, [r7, #18]
  76:	ea42 0303 	orr.w	r3, r2, r3
  7a:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2858
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
  7c:	88fb      	ldrh	r3, [r7, #6]
  7e:	ea4f 3303 	mov.w	r3, r3, lsl #12
  82:	b29a      	uxth	r2, r3
  84:	8a7b      	ldrh	r3, [r7, #18]
  86:	ea42 0303 	orr.w	r3, r2, r3
  8a:	827b      	strh	r3, [r7, #18]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2860
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
  8c:	68fa      	ldr	r2, [r7, #12]
  8e:	f642 4300 	movw	r3, #11264	; 0x2c00
  92:	f2c4 0301 	movt	r3, #16385	; 0x4001
  96:	429a      	cmp	r2, r3
  98:	d01f      	beq.n	da <TI4_Config+0xda>
  9a:	68fa      	ldr	r2, [r7, #12]
  9c:	f243 4300 	movw	r3, #13312	; 0x3400
  a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
  a4:	429a      	cmp	r2, r3
  a6:	d018      	beq.n	da <TI4_Config+0xda>
  a8:	68fb      	ldr	r3, [r7, #12]
  aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  ae:	d014      	beq.n	da <TI4_Config+0xda>
  b0:	68fa      	ldr	r2, [r7, #12]
  b2:	f240 4300 	movw	r3, #1024	; 0x400
  b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
  ba:	429a      	cmp	r2, r3
  bc:	d00d      	beq.n	da <TI4_Config+0xda>
  be:	68fa      	ldr	r2, [r7, #12]
  c0:	f640 0300 	movw	r3, #2048	; 0x800
  c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
  c8:	429a      	cmp	r2, r3
  ca:	d006      	beq.n	da <TI4_Config+0xda>
  cc:	68fa      	ldr	r2, [r7, #12]
  ce:	f640 4300 	movw	r3, #3072	; 0xc00
  d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
  d6:	429a      	cmp	r2, r3
  d8:	d10c      	bne.n	f4 <TI4_Config+0xf4>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2864
     (TIMx == TIM4) ||(TIMx == TIM5))
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
  da:	8abb      	ldrh	r3, [r7, #20]
  dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  e0:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2865
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
  e2:	8afa      	ldrh	r2, [r7, #22]
  e4:	8abb      	ldrh	r3, [r7, #20]
  e6:	ea42 0303 	orr.w	r3, r2, r3
  ea:	b29b      	uxth	r3, r3
  ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  f0:	82bb      	strh	r3, [r7, #20]
  f2:	e00f      	b.n	114 <TI4_Config+0x114>
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2870
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
  f4:	8abb      	ldrh	r3, [r7, #20]
  f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  fa:	ea4f 4343 	mov.w	r3, r3, lsl #17
  fe:	ea4f 4353 	mov.w	r3, r3, lsr #17
 102:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2871
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 104:	897a      	ldrh	r2, [r7, #10]
 106:	8abb      	ldrh	r3, [r7, #20]
 108:	ea42 0303 	orr.w	r3, r2, r3
 10c:	b29b      	uxth	r3, r3
 10e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 112:	82bb      	strh	r3, [r7, #20]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2874
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 114:	68fa      	ldr	r2, [r7, #12]
 116:	8a7b      	ldrh	r3, [r7, #18]
 118:	8393      	strh	r3, [r2, #28]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2875
  TIMx->CCER = tmpccer;
 11a:	68fa      	ldr	r2, [r7, #12]
 11c:	8abb      	ldrh	r3, [r7, #20]
 11e:	8413      	strh	r3, [r2, #32]
D:\ST\STM32F1\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2876
}
 120:	f107 071c 	add.w	r7, r7, #28	; 0x1c
 124:	46bd      	mov	sp, r7
 126:	bc80      	pop	{r7}
 128:	4770      	bx	lr
 12a:	46c0      	nop			(mov r8, r8)
